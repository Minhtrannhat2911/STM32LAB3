
LAB3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bbc  08002bbc  00004058  2**0
                  CONTENTS
  4 .ARM          00000000  08002bbc  08002bbc  00004058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bbc  08002bbc  00004058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bbc  08002bbc  00003bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc0  08002bc0  00003bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002bc4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000058  08002c1c  00004058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08002c1c  0000449c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b65  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f31  00000000  00000000  0000cbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0000eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000884  00000000  00000000  0000f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bbd  00000000  00000000  0000fedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d514  00000000  00000000  00027a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849e3  00000000  00000000  00034fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  000b99d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bc5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b80 	.word	0x08002b80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002b80 	.word	0x08002b80

0800014c <resetAllDigits>:

#include <7SEG.h>
#include "global.h"


void resetAllDigits(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4809      	ldr	r0, [pc, #36]	@ (800017c <resetAllDigits+0x30>)
 8000156:	f001 fcfc 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	4807      	ldr	r0, [pc, #28]	@ (800017c <resetAllDigits+0x30>)
 8000160:	f001 fcf7 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <resetAllDigits+0x30>)
 800016a:	f001 fcf2 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800016e:	2201      	movs	r2, #1
 8000170:	2108      	movs	r1, #8
 8000172:	4802      	ldr	r0, [pc, #8]	@ (800017c <resetAllDigits+0x30>)
 8000174:	f001 fced 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40010c00 	.word	0x40010c00

08000180 <setNum2Digit>:
			break;
		}
	}
}

void setNum2Digit(int a, int b, int c, int d, int e, int f, int g){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
 800018c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, a);
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	b2db      	uxtb	r3, r3
 8000192:	461a      	mov	r2, r3
 8000194:	2180      	movs	r1, #128	@ 0x80
 8000196:	481b      	ldr	r0, [pc, #108]	@ (8000204 <setNum2Digit+0x84>)
 8000198:	f001 fcdb 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, b);
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	461a      	mov	r2, r3
 80001a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001a6:	4817      	ldr	r0, [pc, #92]	@ (8000204 <setNum2Digit+0x84>)
 80001a8:	f001 fcd3 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, c);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001b6:	4813      	ldr	r0, [pc, #76]	@ (8000204 <setNum2Digit+0x84>)
 80001b8:	f001 fccb 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, d);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	461a      	mov	r2, r3
 80001c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c6:	480f      	ldr	r0, [pc, #60]	@ (8000204 <setNum2Digit+0x84>)
 80001c8:	f001 fcc3 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, e);
 80001cc:	69bb      	ldr	r3, [r7, #24]
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001d6:	480b      	ldr	r0, [pc, #44]	@ (8000204 <setNum2Digit+0x84>)
 80001d8:	f001 fcbb 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, f);
 80001dc:	69fb      	ldr	r3, [r7, #28]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001e6:	4807      	ldr	r0, [pc, #28]	@ (8000204 <setNum2Digit+0x84>)
 80001e8:	f001 fcb3 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, g);
 80001ec:	6a3b      	ldr	r3, [r7, #32]
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	461a      	mov	r2, r3
 80001f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001f6:	4803      	ldr	r0, [pc, #12]	@ (8000204 <setNum2Digit+0x84>)
 80001f8:	f001 fcab 	bl	8001b52 <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	3710      	adds	r7, #16
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010800 	.word	0x40010800

08000208 <display7SEG>:

void display7SEG(int num){
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af04      	add	r7, sp, #16
 800020e:	6078      	str	r0, [r7, #4]
    switch(num) {
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b09      	cmp	r3, #9
 8000214:	f200 809a 	bhi.w	800034c <display7SEG+0x144>
 8000218:	a201      	add	r2, pc, #4	@ (adr r2, 8000220 <display7SEG+0x18>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000249 	.word	0x08000249
 8000224:	08000263 	.word	0x08000263
 8000228:	0800027d 	.word	0x0800027d
 800022c:	08000297 	.word	0x08000297
 8000230:	080002b1 	.word	0x080002b1
 8000234:	080002cb 	.word	0x080002cb
 8000238:	080002e5 	.word	0x080002e5
 800023c:	080002ff 	.word	0x080002ff
 8000240:	08000319 	.word	0x08000319
 8000244:	08000333 	.word	0x08000333
		case 0: {
			setNum2Digit(0,0,0,0,0,0,1);
 8000248:	2301      	movs	r3, #1
 800024a:	9302      	str	r3, [sp, #8]
 800024c:	2300      	movs	r3, #0
 800024e:	9301      	str	r3, [sp, #4]
 8000250:	2300      	movs	r3, #0
 8000252:	9300      	str	r3, [sp, #0]
 8000254:	2300      	movs	r3, #0
 8000256:	2200      	movs	r2, #0
 8000258:	2100      	movs	r1, #0
 800025a:	2000      	movs	r0, #0
 800025c:	f7ff ff90 	bl	8000180 <setNum2Digit>
			break;
 8000260:	e075      	b.n	800034e <display7SEG+0x146>
		}
		case 1: {
			setNum2Digit(1,0,0,1,1,1,1);
 8000262:	2301      	movs	r3, #1
 8000264:	9302      	str	r3, [sp, #8]
 8000266:	2301      	movs	r3, #1
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2301      	movs	r3, #1
 8000270:	2200      	movs	r2, #0
 8000272:	2100      	movs	r1, #0
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff83 	bl	8000180 <setNum2Digit>
			break;
 800027a:	e068      	b.n	800034e <display7SEG+0x146>
		}
		case 2: {
			setNum2Digit(0,0,1,0,0,1,0);
 800027c:	2300      	movs	r3, #0
 800027e:	9302      	str	r3, [sp, #8]
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2300      	movs	r3, #0
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2300      	movs	r3, #0
 800028a:	2201      	movs	r2, #1
 800028c:	2100      	movs	r1, #0
 800028e:	2000      	movs	r0, #0
 8000290:	f7ff ff76 	bl	8000180 <setNum2Digit>
			break;
 8000294:	e05b      	b.n	800034e <display7SEG+0x146>
		}
		case 3: {
			setNum2Digit(0,0,0,0,1,1,0);
 8000296:	2300      	movs	r3, #0
 8000298:	9302      	str	r3, [sp, #8]
 800029a:	2301      	movs	r3, #1
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	2301      	movs	r3, #1
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	2200      	movs	r2, #0
 80002a6:	2100      	movs	r1, #0
 80002a8:	2000      	movs	r0, #0
 80002aa:	f7ff ff69 	bl	8000180 <setNum2Digit>
			break;
 80002ae:	e04e      	b.n	800034e <display7SEG+0x146>
		}
		case 4: {
			setNum2Digit(1,0,0,1,1,0,0);
 80002b0:	2300      	movs	r3, #0
 80002b2:	9302      	str	r3, [sp, #8]
 80002b4:	2300      	movs	r3, #0
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2301      	movs	r3, #1
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2301      	movs	r3, #1
 80002be:	2200      	movs	r2, #0
 80002c0:	2100      	movs	r1, #0
 80002c2:	2001      	movs	r0, #1
 80002c4:	f7ff ff5c 	bl	8000180 <setNum2Digit>
			break;
 80002c8:	e041      	b.n	800034e <display7SEG+0x146>
		}
		case 5: {
			setNum2Digit(0,1,0,0,1,0,0);
 80002ca:	2300      	movs	r3, #0
 80002cc:	9302      	str	r3, [sp, #8]
 80002ce:	2300      	movs	r3, #0
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	2000      	movs	r0, #0
 80002de:	f7ff ff4f 	bl	8000180 <setNum2Digit>
			break;
 80002e2:	e034      	b.n	800034e <display7SEG+0x146>
		}
		case 6: {
			setNum2Digit(0,1,0,0,0,0,0);
 80002e4:	2300      	movs	r3, #0
 80002e6:	9302      	str	r3, [sp, #8]
 80002e8:	2300      	movs	r3, #0
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2300      	movs	r3, #0
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2300      	movs	r3, #0
 80002f2:	2200      	movs	r2, #0
 80002f4:	2101      	movs	r1, #1
 80002f6:	2000      	movs	r0, #0
 80002f8:	f7ff ff42 	bl	8000180 <setNum2Digit>
			break;
 80002fc:	e027      	b.n	800034e <display7SEG+0x146>
		}
		case 7: {
			setNum2Digit(0,0,0,1,1,1,1);
 80002fe:	2301      	movs	r3, #1
 8000300:	9302      	str	r3, [sp, #8]
 8000302:	2301      	movs	r3, #1
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	2200      	movs	r2, #0
 800030e:	2100      	movs	r1, #0
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ff35 	bl	8000180 <setNum2Digit>
			break;
 8000316:	e01a      	b.n	800034e <display7SEG+0x146>
		}
		case 8: {
			setNum2Digit(0,0,0,0,0,0,0);
 8000318:	2300      	movs	r3, #0
 800031a:	9302      	str	r3, [sp, #8]
 800031c:	2300      	movs	r3, #0
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	2300      	movs	r3, #0
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2300      	movs	r3, #0
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	2000      	movs	r0, #0
 800032c:	f7ff ff28 	bl	8000180 <setNum2Digit>
			break;
 8000330:	e00d      	b.n	800034e <display7SEG+0x146>
		}
		case 9: {
			setNum2Digit(0,0,0,0,1,0,0);
 8000332:	2300      	movs	r3, #0
 8000334:	9302      	str	r3, [sp, #8]
 8000336:	2300      	movs	r3, #0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ff1b 	bl	8000180 <setNum2Digit>
			break;
 800034a:	e000      	b.n	800034e <display7SEG+0x146>
		}
		default: {
			break;
 800034c:	bf00      	nop
		}
    }
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop

08000358 <update7SEG>:

int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	resetAllDigits();
 8000360:	f7ff fef4 	bl	800014c <resetAllDigits>
    switch (index) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b03      	cmp	r3, #3
 8000368:	d836      	bhi.n	80003d8 <update7SEG+0x80>
 800036a:	a201      	add	r2, pc, #4	@ (adr r2, 8000370 <update7SEG+0x18>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000381 	.word	0x08000381
 8000374:	08000397 	.word	0x08000397
 8000378:	080003ad 	.word	0x080003ad
 800037c:	080003c3 	.word	0x080003c3
        case 0:{
            // Display the first 7 SEG with led_buffer[0]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4817      	ldr	r0, [pc, #92]	@ (80003e4 <update7SEG+0x8c>)
 8000386:	f001 fbe4 	bl	8001b52 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[0]);
 800038a:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <update7SEG+0x90>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff3a 	bl	8000208 <display7SEG>
            break;
 8000394:	e021      	b.n	80003da <update7SEG+0x82>
        }
        case 1:{
            // Display the second 7 SEG with led_buffer[1]
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2102      	movs	r1, #2
 800039a:	4812      	ldr	r0, [pc, #72]	@ (80003e4 <update7SEG+0x8c>)
 800039c:	f001 fbd9 	bl	8001b52 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[1]);
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <update7SEG+0x90>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff2f 	bl	8000208 <display7SEG>
            break;
 80003aa:	e016      	b.n	80003da <update7SEG+0x82>
        }
        case 2:{
            // Display the third 7 SEG with led_buffer[2]
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2104      	movs	r1, #4
 80003b0:	480c      	ldr	r0, [pc, #48]	@ (80003e4 <update7SEG+0x8c>)
 80003b2:	f001 fbce 	bl	8001b52 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[2]);
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <update7SEG+0x90>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff24 	bl	8000208 <display7SEG>
            break;
 80003c0:	e00b      	b.n	80003da <update7SEG+0x82>
        }
        case 3:{
            // Display the fourth 7 SEG with led_buffer[3]
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2108      	movs	r1, #8
 80003c6:	4807      	ldr	r0, [pc, #28]	@ (80003e4 <update7SEG+0x8c>)
 80003c8:	f001 fbc3 	bl	8001b52 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[3]);
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <update7SEG+0x90>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff19 	bl	8000208 <display7SEG>
            break;
 80003d6:	e000      	b.n	80003da <update7SEG+0x82>
        }
        default:{
            break;
 80003d8:	bf00      	nop
        }
    }
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	20000000 	.word	0x20000000

080003ec <BufferHorizontal>:

void BufferHorizontal(int value) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	led_buffer[0] = (value / 10) % 10;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a13      	ldr	r2, [pc, #76]	@ (8000444 <BufferHorizontal+0x58>)
 80003f8:	fb82 1203 	smull	r1, r2, r2, r3
 80003fc:	1092      	asrs	r2, r2, #2
 80003fe:	17db      	asrs	r3, r3, #31
 8000400:	1ad1      	subs	r1, r2, r3
 8000402:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <BufferHorizontal+0x58>)
 8000404:	fb83 2301 	smull	r2, r3, r3, r1
 8000408:	109a      	asrs	r2, r3, #2
 800040a:	17cb      	asrs	r3, r1, #31
 800040c:	1ad2      	subs	r2, r2, r3
 800040e:	4613      	mov	r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1aca      	subs	r2, r1, r3
 8000418:	4b0b      	ldr	r3, [pc, #44]	@ (8000448 <BufferHorizontal+0x5c>)
 800041a:	601a      	str	r2, [r3, #0]
	led_buffer[1]= value % 10;
 800041c:	6879      	ldr	r1, [r7, #4]
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <BufferHorizontal+0x58>)
 8000420:	fb83 2301 	smull	r2, r3, r3, r1
 8000424:	109a      	asrs	r2, r3, #2
 8000426:	17cb      	asrs	r3, r1, #31
 8000428:	1ad2      	subs	r2, r2, r3
 800042a:	4613      	mov	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	1aca      	subs	r2, r1, r3
 8000434:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <BufferHorizontal+0x5c>)
 8000436:	605a      	str	r2, [r3, #4]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	66666667 	.word	0x66666667
 8000448:	20000000 	.word	0x20000000

0800044c <BufferVertical>:
void BufferVertical(int value) {
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	led_buffer[2] = (value / 10) % 10;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a13      	ldr	r2, [pc, #76]	@ (80004a4 <BufferVertical+0x58>)
 8000458:	fb82 1203 	smull	r1, r2, r2, r3
 800045c:	1092      	asrs	r2, r2, #2
 800045e:	17db      	asrs	r3, r3, #31
 8000460:	1ad1      	subs	r1, r2, r3
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <BufferVertical+0x58>)
 8000464:	fb83 2301 	smull	r2, r3, r3, r1
 8000468:	109a      	asrs	r2, r3, #2
 800046a:	17cb      	asrs	r3, r1, #31
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	4613      	mov	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	1aca      	subs	r2, r1, r3
 8000478:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <BufferVertical+0x5c>)
 800047a:	609a      	str	r2, [r3, #8]
	led_buffer[3]= value % 10;
 800047c:	6879      	ldr	r1, [r7, #4]
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <BufferVertical+0x58>)
 8000480:	fb83 2301 	smull	r2, r3, r3, r1
 8000484:	109a      	asrs	r2, r3, #2
 8000486:	17cb      	asrs	r3, r1, #31
 8000488:	1ad2      	subs	r2, r2, r3
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	1aca      	subs	r2, r1, r3
 8000494:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <BufferVertical+0x5c>)
 8000496:	60da      	str	r2, [r3, #12]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	66666667 	.word	0x66666667
 80004a8:	20000000 	.word	0x20000000

080004ac <autoUpdate7Seg>:

int idx = 0;
void autoUpdate7Seg() {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	update7SEG(idx++);
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <autoUpdate7Seg+0x28>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	1c5a      	adds	r2, r3, #1
 80004b6:	4907      	ldr	r1, [pc, #28]	@ (80004d4 <autoUpdate7Seg+0x28>)
 80004b8:	600a      	str	r2, [r1, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff4c 	bl	8000358 <update7SEG>
	if (idx >= 4){
 80004c0:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <autoUpdate7Seg+0x28>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	dd02      	ble.n	80004ce <autoUpdate7Seg+0x22>
		idx = 0;
 80004c8:	4b02      	ldr	r3, [pc, #8]	@ (80004d4 <autoUpdate7Seg+0x28>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
	}
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000074 	.word	0x20000074

080004d8 <isButtonPressed>:
        default:
            break;
    }
}
*/
int isButtonPressed(int buttonIndex) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    if (button_flag[buttonIndex] == 1) {
 80004e0:	4a09      	ldr	r2, [pc, #36]	@ (8000508 <isButtonPressed+0x30>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d106      	bne.n	80004fa <isButtonPressed+0x22>
        button_flag[buttonIndex] = 0;
 80004ec:	4a06      	ldr	r2, [pc, #24]	@ (8000508 <isButtonPressed+0x30>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2100      	movs	r1, #0
 80004f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <isButtonPressed+0x24>
    }
    return 0;
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000140 	.word	0x20000140

0800050c <getKeyInput>:

void subKeyProcess(int buttonIndex) {
    button_flag[buttonIndex] = 1;
}

void getKeyInput() {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e0a5      	b.n	8000664 <getKeyInput+0x158>
        KeyReg0[i] = KeyReg1[i];
 8000518:	4a57      	ldr	r2, [pc, #348]	@ (8000678 <getKeyInput+0x16c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000520:	4956      	ldr	r1, [pc, #344]	@ (800067c <getKeyInput+0x170>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 8000528:	4a55      	ldr	r2, [pc, #340]	@ (8000680 <getKeyInput+0x174>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000530:	4951      	ldr	r1, [pc, #324]	@ (8000678 <getKeyInput+0x16c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        switch (i) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d836      	bhi.n	80005ac <getKeyInput+0xa0>
 800053e:	a201      	add	r2, pc, #4	@ (adr r2, 8000544 <getKeyInput+0x38>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	08000555 	.word	0x08000555
 8000548:	0800056b 	.word	0x0800056b
 800054c:	08000581 	.word	0x08000581
 8000550:	08000597 	.word	0x08000597
            case MODE_BUTTON:
                KeyReg2[i] = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 8000554:	2110      	movs	r1, #16
 8000556:	484b      	ldr	r0, [pc, #300]	@ (8000684 <getKeyInput+0x178>)
 8000558:	f001 fae4 	bl	8001b24 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	4619      	mov	r1, r3
 8000560:	4a47      	ldr	r2, [pc, #284]	@ (8000680 <getKeyInput+0x174>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8000568:	e021      	b.n	80005ae <getKeyInput+0xa2>
            case ADD_BUTTON:
                KeyReg2[i] = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 800056a:	2120      	movs	r1, #32
 800056c:	4845      	ldr	r0, [pc, #276]	@ (8000684 <getKeyInput+0x178>)
 800056e:	f001 fad9 	bl	8001b24 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	4619      	mov	r1, r3
 8000576:	4a42      	ldr	r2, [pc, #264]	@ (8000680 <getKeyInput+0x174>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 800057e:	e016      	b.n	80005ae <getKeyInput+0xa2>
            case RESET_BUTTON:
                KeyReg2[i] = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 8000580:	2140      	movs	r1, #64	@ 0x40
 8000582:	4840      	ldr	r0, [pc, #256]	@ (8000684 <getKeyInput+0x178>)
 8000584:	f001 face 	bl	8001b24 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	4619      	mov	r1, r3
 800058c:	4a3c      	ldr	r2, [pc, #240]	@ (8000680 <getKeyInput+0x174>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8000594:	e00b      	b.n	80005ae <getKeyInput+0xa2>
            case CONFIRM_BUTTON:
                KeyReg2[i] = HAL_GPIO_ReadPin(BUT4_GPIO_Port, BUT4_Pin);
 8000596:	2180      	movs	r1, #128	@ 0x80
 8000598:	483a      	ldr	r0, [pc, #232]	@ (8000684 <getKeyInput+0x178>)
 800059a:	f001 fac3 	bl	8001b24 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	4619      	mov	r1, r3
 80005a2:	4a37      	ldr	r2, [pc, #220]	@ (8000680 <getKeyInput+0x174>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 80005aa:	e000      	b.n	80005ae <getKeyInput+0xa2>
            default:
                break;
 80005ac:	bf00      	nop
        }


        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80005ae:	4a33      	ldr	r2, [pc, #204]	@ (800067c <getKeyInput+0x170>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b6:	4930      	ldr	r1, [pc, #192]	@ (8000678 <getKeyInput+0x16c>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d14d      	bne.n	800065e <getKeyInput+0x152>
 80005c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <getKeyInput+0x16c>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ca:	492d      	ldr	r1, [pc, #180]	@ (8000680 <getKeyInput+0x174>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d143      	bne.n	800065e <getKeyInput+0x152>
            if (KeyReg3[i] != KeyReg2[i]) {
 80005d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000688 <getKeyInput+0x17c>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	4928      	ldr	r1, [pc, #160]	@ (8000680 <getKeyInput+0x174>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d019      	beq.n	800061e <getKeyInput+0x112>
                KeyReg3[i] = KeyReg2[i];
 80005ea:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <getKeyInput+0x174>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f2:	4925      	ldr	r1, [pc, #148]	@ (8000688 <getKeyInput+0x17c>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (KeyReg3[i] == PRESSED_STATE) {
 80005fa:	4a23      	ldr	r2, [pc, #140]	@ (8000688 <getKeyInput+0x17c>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d12b      	bne.n	800065e <getKeyInput+0x152>
                    button_flag[i] = 1;
 8000606:	4a21      	ldr	r2, [pc, #132]	@ (800068c <getKeyInput+0x180>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2101      	movs	r1, #1
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    TimerForkeyPress[i] = 500;
 8000610:	4a1f      	ldr	r2, [pc, #124]	@ (8000690 <getKeyInput+0x184>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000618:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800061c:	e01f      	b.n	800065e <getKeyInput+0x152>
                }
            } else {
                if (KeyReg3[i] == PRESSED_STATE) {
 800061e:	4a1a      	ldr	r2, [pc, #104]	@ (8000688 <getKeyInput+0x17c>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d119      	bne.n	800065e <getKeyInput+0x152>
                    TimerForkeyPress[i]--;
 800062a:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <getKeyInput+0x184>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4916      	ldr	r1, [pc, #88]	@ (8000690 <getKeyInput+0x184>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if (TimerForkeyPress[i] == 0) {
 800063c:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <getKeyInput+0x184>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10a      	bne.n	800065e <getKeyInput+0x152>
                        button_long_pressed[i] = 1;
 8000648:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <getKeyInput+0x188>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2101      	movs	r1, #1
 800064e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimerForkeyPress[i] = 500;
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <getKeyInput+0x184>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800065a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b09      	cmp	r3, #9
 8000668:	f77f af56 	ble.w	8000518 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000a0 	.word	0x200000a0
 800067c:	20000078 	.word	0x20000078
 8000680:	200000c8 	.word	0x200000c8
 8000684:	40010c00 	.word	0x40010c00
 8000688:	200000f0 	.word	0x200000f0
 800068c:	20000140 	.word	0x20000140
 8000690:	20000010 	.word	0x20000010
 8000694:	20000118 	.word	0x20000118

08000698 <updateBuffer>:


int countdownX = 0;
int countdownY = 0;

void updateBuffer(int x, int y) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    // cập nhậthai buffer cùng một lúc
    BufferHorizontal(x);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fea2 	bl	80003ec <BufferHorizontal>
    BufferVertical(y);
 80006a8:	6838      	ldr	r0, [r7, #0]
 80006aa:	f7ff fecf 	bl	800044c <BufferVertical>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <updateCountdownAndResetTimer>:

void updateCountdownAndResetTimer() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

    updateBuffer(countdownX, countdownY); // Cập nhật lại buffer hiển thị
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <updateCountdownAndResetTimer+0x38>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	@ (80006f4 <updateCountdownAndResetTimer+0x3c>)
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffe6 	bl	8000698 <updateBuffer>
    countdownX--;
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <updateCountdownAndResetTimer+0x38>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <updateCountdownAndResetTimer+0x38>)
 80006d4:	6013      	str	r3, [r2, #0]
    countdownY--;
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <updateCountdownAndResetTimer+0x3c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <updateCountdownAndResetTimer+0x3c>)
 80006de:	6013      	str	r3, [r2, #0]
    setTimer(1, 1000); // Timer 2
 80006e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fe2b 	bl	8001340 <setTimer>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000168 	.word	0x20000168
 80006f4:	2000016c 	.word	0x2000016c

080006f8 <switchToManualMode>:

void switchToManualMode() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    status = MAN;
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <switchToManualMode+0x1c>)
 80006fe:	2203      	movs	r2, #3
 8000700:	601a      	str	r2, [r3, #0]
    setTimer(2, 10000); // Timer 3
 8000702:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000706:	2002      	movs	r0, #2
 8000708:	f000 fe1a 	bl	8001340 <setTimer>
    clearTrafficLight();
 800070c:	f000 fb3a 	bl	8000d84 <clearTrafficLight>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000038 	.word	0x20000038

08000718 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    switch (status) {
 800071c:	4b7d      	ldr	r3, [pc, #500]	@ (8000914 <fsm_automatic_run+0x1fc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b02      	subs	r3, #2
 8000722:	2b0c      	cmp	r3, #12
 8000724:	f200 80ea 	bhi.w	80008fc <fsm_automatic_run+0x1e4>
 8000728:	a201      	add	r2, pc, #4	@ (adr r2, 8000730 <fsm_automatic_run+0x18>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	08000765 	.word	0x08000765
 8000734:	080008fd 	.word	0x080008fd
 8000738:	080008fd 	.word	0x080008fd
 800073c:	080008fd 	.word	0x080008fd
 8000740:	080008fd 	.word	0x080008fd
 8000744:	080008fd 	.word	0x080008fd
 8000748:	080008fd 	.word	0x080008fd
 800074c:	080008fd 	.word	0x080008fd
 8000750:	080008fd 	.word	0x080008fd
 8000754:	08000857 	.word	0x08000857
 8000758:	080007af 	.word	0x080007af
 800075c:	080007ff 	.word	0x080007ff
 8000760:	080008a5 	.word	0x080008a5
        case AUTO: {
            status = GREEN_RED;
 8000764:	4b6b      	ldr	r3, [pc, #428]	@ (8000914 <fsm_automatic_run+0x1fc>)
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
            countdownX = greenTime - 1;
 800076a:	4b6b      	ldr	r3, [pc, #428]	@ (8000918 <fsm_automatic_run+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	4a6a      	ldr	r2, [pc, #424]	@ (800091c <fsm_automatic_run+0x204>)
 8000772:	6013      	str	r3, [r2, #0]
            countdownY = redTime - 1;
 8000774:	4b6a      	ldr	r3, [pc, #424]	@ (8000920 <fsm_automatic_run+0x208>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3b01      	subs	r3, #1
 800077a:	4a6a      	ldr	r2, [pc, #424]	@ (8000924 <fsm_automatic_run+0x20c>)
 800077c:	6013      	str	r3, [r2, #0]
            updateBuffer(countdownX, countdownY);
 800077e:	4b67      	ldr	r3, [pc, #412]	@ (800091c <fsm_automatic_run+0x204>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a68      	ldr	r2, [pc, #416]	@ (8000924 <fsm_automatic_run+0x20c>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff85 	bl	8000698 <updateBuffer>
            setTimer(0, greenTime * 1500); // Timer 1
 800078e:	4b62      	ldr	r3, [pc, #392]	@ (8000918 <fsm_automatic_run+0x200>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000796:	fb02 f303 	mul.w	r3, r2, r3
 800079a:	4619      	mov	r1, r3
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fdcf 	bl	8001340 <setTimer>
            setTimer(1, 1000);
 80007a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fdca 	bl	8001340 <setTimer>
            break;
 80007ac:	e0af      	b.n	800090e <fsm_automatic_run+0x1f6>
        }
        case GREEN_RED: {
        	Green_Red();
 80007ae:	f000 fa21 	bl	8000bf4 <Green_Red>
            if (timer_flag[0] == 1) {
 80007b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000928 <fsm_automatic_run+0x210>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d111      	bne.n	80007de <fsm_automatic_run+0xc6>
                status = YELLOW_RED;
 80007ba:	4b56      	ldr	r3, [pc, #344]	@ (8000914 <fsm_automatic_run+0x1fc>)
 80007bc:	220d      	movs	r2, #13
 80007be:	601a      	str	r2, [r3, #0]
                setTimer(0, yellowTime * 1000); // Timer 1
 80007c0:	4b5a      	ldr	r3, [pc, #360]	@ (800092c <fsm_automatic_run+0x214>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fdb6 	bl	8001340 <setTimer>
                countdownX = yellowTime - 1;
 80007d4:	4b55      	ldr	r3, [pc, #340]	@ (800092c <fsm_automatic_run+0x214>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	4a50      	ldr	r2, [pc, #320]	@ (800091c <fsm_automatic_run+0x204>)
 80007dc:	6013      	str	r3, [r2, #0]
            }
            if (timer_flag[1] == 1) {
 80007de:	4b52      	ldr	r3, [pc, #328]	@ (8000928 <fsm_automatic_run+0x210>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d101      	bne.n	80007ea <fsm_automatic_run+0xd2>
                updateCountdownAndResetTimer();
 80007e6:	f7ff ff67 	bl	80006b8 <updateCountdownAndResetTimer>
            }
            if (isButtonPressed(0)) {
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff fe74 	bl	80004d8 <isButtonPressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 8084 	beq.w	8000900 <fsm_automatic_run+0x1e8>
                switchToManualMode();
 80007f8:	f7ff ff7e 	bl	80006f8 <switchToManualMode>
            }
            break;
 80007fc:	e080      	b.n	8000900 <fsm_automatic_run+0x1e8>
        }
        case YELLOW_RED: {
            Yellow_Red();
 80007fe:	f000 fa1d 	bl	8000c3c <Yellow_Red>
            // Kiểm tra nếu timer_flag[0] đã kích hoạt (kết thúc đèn vàng)
            if (timer_flag[0] == 1) {
 8000802:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <fsm_automatic_run+0x210>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d116      	bne.n	8000838 <fsm_automatic_run+0x120>
                status = RED_GREEN;
 800080a:	4b42      	ldr	r3, [pc, #264]	@ (8000914 <fsm_automatic_run+0x1fc>)
 800080c:	220b      	movs	r2, #11
 800080e:	601a      	str	r2, [r3, #0]
                setTimer(0, greenTime * 1000); // Chuyển sang RED_GREEN
 8000810:	4b41      	ldr	r3, [pc, #260]	@ (8000918 <fsm_automatic_run+0x200>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	4619      	mov	r1, r3
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fd8e 	bl	8001340 <setTimer>
                countdownX = redTime - 1;
 8000824:	4b3e      	ldr	r3, [pc, #248]	@ (8000920 <fsm_automatic_run+0x208>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	4a3c      	ldr	r2, [pc, #240]	@ (800091c <fsm_automatic_run+0x204>)
 800082c:	6013      	str	r3, [r2, #0]
                countdownY = greenTime - 1;
 800082e:	4b3a      	ldr	r3, [pc, #232]	@ (8000918 <fsm_automatic_run+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3b01      	subs	r3, #1
 8000834:	4a3b      	ldr	r2, [pc, #236]	@ (8000924 <fsm_automatic_run+0x20c>)
 8000836:	6013      	str	r3, [r2, #0]
            }
            // Giảm thời gian hiển thị nếu timer_flag[1] kích hoạt
            if (timer_flag[1] == 1) {
 8000838:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <fsm_automatic_run+0x210>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d101      	bne.n	8000844 <fsm_automatic_run+0x12c>
                updateCountdownAndResetTimer();
 8000840:	f7ff ff3a 	bl	80006b8 <updateCountdownAndResetTimer>
            }
            // Kiểm tra nếu nút nhấn để chuyển chế độ
            if (isButtonPressed(0)) {
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff fe47 	bl	80004d8 <isButtonPressed>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d059      	beq.n	8000904 <fsm_automatic_run+0x1ec>
                switchToManualMode();
 8000850:	f7ff ff52 	bl	80006f8 <switchToManualMode>
            }
            break;
 8000854:	e056      	b.n	8000904 <fsm_automatic_run+0x1ec>
        }

        case RED_GREEN: {
        	Red_Green();
 8000856:	f000 fa15 	bl	8000c84 <Red_Green>
            if (timer_flag[0] == 1) {
 800085a:	4b33      	ldr	r3, [pc, #204]	@ (8000928 <fsm_automatic_run+0x210>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d111      	bne.n	8000886 <fsm_automatic_run+0x16e>
                status = RED_YELLOW;
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <fsm_automatic_run+0x1fc>)
 8000864:	220e      	movs	r2, #14
 8000866:	601a      	str	r2, [r3, #0]
                setTimer(0, yellowTime * 1000); // Timer 1
 8000868:	4b30      	ldr	r3, [pc, #192]	@ (800092c <fsm_automatic_run+0x214>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000870:	fb02 f303 	mul.w	r3, r2, r3
 8000874:	4619      	mov	r1, r3
 8000876:	2000      	movs	r0, #0
 8000878:	f000 fd62 	bl	8001340 <setTimer>
                countdownY = yellowTime - 1;
 800087c:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <fsm_automatic_run+0x214>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	4a28      	ldr	r2, [pc, #160]	@ (8000924 <fsm_automatic_run+0x20c>)
 8000884:	6013      	str	r3, [r2, #0]
            }
            if (timer_flag[1] == 1) {
 8000886:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <fsm_automatic_run+0x210>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d101      	bne.n	8000892 <fsm_automatic_run+0x17a>
                updateCountdownAndResetTimer();
 800088e:	f7ff ff13 	bl	80006b8 <updateCountdownAndResetTimer>
            }
            if (isButtonPressed(0)) {
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fe20 	bl	80004d8 <isButtonPressed>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d034      	beq.n	8000908 <fsm_automatic_run+0x1f0>
                switchToManualMode();
 800089e:	f7ff ff2b 	bl	80006f8 <switchToManualMode>
            }
            break;
 80008a2:	e031      	b.n	8000908 <fsm_automatic_run+0x1f0>
        }
        case RED_YELLOW: {
        	Red_Yellow();
 80008a4:	f000 fa12 	bl	8000ccc <Red_Yellow>
            if (timer_flag[0] == 1) {
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <fsm_automatic_run+0x210>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d116      	bne.n	80008de <fsm_automatic_run+0x1c6>
                status = GREEN_RED;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <fsm_automatic_run+0x1fc>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
                setTimer(0, greenTime * 1000); // Timer 1
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <fsm_automatic_run+0x200>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 fd3b 	bl	8001340 <setTimer>
                countdownX = greenTime - 1;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <fsm_automatic_run+0x200>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <fsm_automatic_run+0x204>)
 80008d2:	6013      	str	r3, [r2, #0]
                countdownY = redTime - 1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <fsm_automatic_run+0x208>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <fsm_automatic_run+0x20c>)
 80008dc:	6013      	str	r3, [r2, #0]
            }
            if (timer_flag[1] == 1) {
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <fsm_automatic_run+0x210>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d101      	bne.n	80008ea <fsm_automatic_run+0x1d2>
                updateCountdownAndResetTimer();
 80008e6:	f7ff fee7 	bl	80006b8 <updateCountdownAndResetTimer>
            }
            if (isButtonPressed(0)) {
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff fdf4 	bl	80004d8 <isButtonPressed>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00a      	beq.n	800090c <fsm_automatic_run+0x1f4>
                switchToManualMode();
 80008f6:	f7ff feff 	bl	80006f8 <switchToManualMode>
            }
            break;
 80008fa:	e007      	b.n	800090c <fsm_automatic_run+0x1f4>
        }
        default: {
            break;
 80008fc:	bf00      	nop
 80008fe:	e006      	b.n	800090e <fsm_automatic_run+0x1f6>
            break;
 8000900:	bf00      	nop
 8000902:	e004      	b.n	800090e <fsm_automatic_run+0x1f6>
            break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <fsm_automatic_run+0x1f6>
            break;
 8000908:	bf00      	nop
 800090a:	e000      	b.n	800090e <fsm_automatic_run+0x1f6>
            break;
 800090c:	bf00      	nop
        }
    }
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000038 	.word	0x20000038
 8000918:	20000044 	.word	0x20000044
 800091c:	20000168 	.word	0x20000168
 8000920:	2000003c 	.word	0x2000003c
 8000924:	2000016c 	.word	0x2000016c
 8000928:	20000448 	.word	0x20000448
 800092c:	20000040 	.word	0x20000040

08000930 <updateBufferAndClear>:
int mode = 0;
int redValue = 0;
int yellowValue = 0;
int greenValue = 0;

void updateBufferAndClear(int newMode, int value) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    mode = newMode;
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <updateBufferAndClear+0x2c>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6013      	str	r3, [r2, #0]
    BufferHorizontal(mode);
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <updateBufferAndClear+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fd51 	bl	80003ec <BufferHorizontal>
    BufferVertical(value);
 800094a:	6838      	ldr	r0, [r7, #0]
 800094c:	f7ff fd7e 	bl	800044c <BufferVertical>
    clearTrafficLight();
 8000950:	f000 fa18 	bl	8000d84 <clearTrafficLight>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000170 	.word	0x20000170

08000960 <handleButtonPressed>:

void handleButtonPressed(int nextStatus, int newMode, void (*updateFunc)(void), int value) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
    if (isButtonPressed(0)) {
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fdb2 	bl	80004d8 <isButtonPressed>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d007      	beq.n	800098a <handleButtonPressed+0x2a>
        status = nextStatus;
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <handleButtonPressed+0x78>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6013      	str	r3, [r2, #0]
        updateBufferAndClear(newMode, value);
 8000980:	6839      	ldr	r1, [r7, #0]
 8000982:	68b8      	ldr	r0, [r7, #8]
 8000984:	f7ff ffd4 	bl	8000930 <updateBufferAndClear>
        status = MAN;
        setTimer(2, 10000); // Timer 3
        clearTrafficLight();
        mode = 0;
    }
}
 8000988:	e021      	b.n	80009ce <handleButtonPressed+0x6e>
    } else if (isButtonPressed(1) && updateFunc) {
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fda4 	bl	80004d8 <isButtonPressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d008      	beq.n	80009a8 <handleButtonPressed+0x48>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d005      	beq.n	80009a8 <handleButtonPressed+0x48>
        updateFunc();
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4798      	blx	r3
        BufferVertical(value);
 80009a0:	6838      	ldr	r0, [r7, #0]
 80009a2:	f7ff fd53 	bl	800044c <BufferVertical>
}
 80009a6:	e012      	b.n	80009ce <handleButtonPressed+0x6e>
    } else if (isButtonPressed(2)) {
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fd95 	bl	80004d8 <isButtonPressed>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00c      	beq.n	80009ce <handleButtonPressed+0x6e>
        status = MAN;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <handleButtonPressed+0x78>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	601a      	str	r2, [r3, #0]
        setTimer(2, 10000); // Timer 3
 80009ba:	f242 7110 	movw	r1, #10000	@ 0x2710
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 fcbe 	bl	8001340 <setTimer>
        clearTrafficLight();
 80009c4:	f000 f9de 	bl	8000d84 <clearTrafficLight>
        mode = 0;
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <handleButtonPressed+0x7c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000038 	.word	0x20000038
 80009dc:	20000170 	.word	0x20000170

080009e0 <fsm_manual_run>:

void fsm_manual_run() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    if (timer_flag[3] == 1) {
 80009e4:	4b57      	ldr	r3, [pc, #348]	@ (8000b44 <fsm_manual_run+0x164>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d13d      	bne.n	8000a68 <fsm_manual_run+0x88>
        setTimer(3, 500); // Timer 4
 80009ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 fca5 	bl	8001340 <setTimer>
        switch (status) {
 80009f6:	4b54      	ldr	r3, [pc, #336]	@ (8000b48 <fsm_manual_run+0x168>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3b03      	subs	r3, #3
 80009fc:	2b11      	cmp	r3, #17
 80009fe:	d833      	bhi.n	8000a68 <fsm_manual_run+0x88>
 8000a00:	a201      	add	r2, pc, #4	@ (adr r2, 8000a08 <fsm_manual_run+0x28>)
 8000a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a06:	bf00      	nop
 8000a08:	08000a51 	.word	0x08000a51
 8000a0c:	08000a69 	.word	0x08000a69
 8000a10:	08000a69 	.word	0x08000a69
 8000a14:	08000a69 	.word	0x08000a69
 8000a18:	08000a69 	.word	0x08000a69
 8000a1c:	08000a69 	.word	0x08000a69
 8000a20:	08000a69 	.word	0x08000a69
 8000a24:	08000a69 	.word	0x08000a69
 8000a28:	08000a69 	.word	0x08000a69
 8000a2c:	08000a69 	.word	0x08000a69
 8000a30:	08000a69 	.word	0x08000a69
 8000a34:	08000a69 	.word	0x08000a69
 8000a38:	08000a69 	.word	0x08000a69
 8000a3c:	08000a69 	.word	0x08000a69
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	08000a57 	.word	0x08000a57
 8000a48:	08000a5d 	.word	0x08000a5d
 8000a4c:	08000a63 	.word	0x08000a63
            case MAN: blinkAllLed(); break;
 8000a50:	f000 fa22 	bl	8000e98 <blinkAllLed>
 8000a54:	e008      	b.n	8000a68 <fsm_manual_run+0x88>
            case MODE2: blinkRedLed(); break;
 8000a56:	f000 f9b9 	bl	8000dcc <blinkRedLed>
 8000a5a:	e005      	b.n	8000a68 <fsm_manual_run+0x88>
            case MODE3: blinkYellowLed(); break;
 8000a5c:	f000 f9d8 	bl	8000e10 <blinkYellowLed>
 8000a60:	e002      	b.n	8000a68 <fsm_manual_run+0x88>
            case MODE4: blinkGreenLed(); break;
 8000a62:	f000 f9f7 	bl	8000e54 <blinkGreenLed>
 8000a66:	bf00      	nop
        }
    }

    switch (status) {
 8000a68:	4b37      	ldr	r3, [pc, #220]	@ (8000b48 <fsm_manual_run+0x168>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	2b11      	cmp	r3, #17
 8000a70:	d862      	bhi.n	8000b38 <fsm_manual_run+0x158>
 8000a72:	a201      	add	r2, pc, #4	@ (adr r2, 8000a78 <fsm_manual_run+0x98>)
 8000a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a78:	08000ac1 	.word	0x08000ac1
 8000a7c:	08000b39 	.word	0x08000b39
 8000a80:	08000b39 	.word	0x08000b39
 8000a84:	08000b39 	.word	0x08000b39
 8000a88:	08000b39 	.word	0x08000b39
 8000a8c:	08000b39 	.word	0x08000b39
 8000a90:	08000b39 	.word	0x08000b39
 8000a94:	08000b39 	.word	0x08000b39
 8000a98:	08000b39 	.word	0x08000b39
 8000a9c:	08000b39 	.word	0x08000b39
 8000aa0:	08000b39 	.word	0x08000b39
 8000aa4:	08000b39 	.word	0x08000b39
 8000aa8:	08000b39 	.word	0x08000b39
 8000aac:	08000b39 	.word	0x08000b39
 8000ab0:	08000b39 	.word	0x08000b39
 8000ab4:	08000b09 	.word	0x08000b09
 8000ab8:	08000b19 	.word	0x08000b19
 8000abc:	08000b29 	.word	0x08000b29
        case MAN: {
            BufferHorizontal(mode);
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <fsm_manual_run+0x16c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fc91 	bl	80003ec <BufferHorizontal>
            BufferVertical(0);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fcbe 	bl	800044c <BufferVertical>
            if (isButtonPressed(0)) {
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fd01 	bl	80004d8 <isButtonPressed>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d02f      	beq.n	8000b3c <fsm_manual_run+0x15c>
                status = MODE2;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <fsm_manual_run+0x168>)
 8000ade:	2212      	movs	r2, #18
 8000ae0:	601a      	str	r2, [r3, #0]
                redValue = redTime;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <fsm_manual_run+0x170>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <fsm_manual_run+0x174>)
 8000ae8:	6013      	str	r3, [r2, #0]
                yellowValue = yellowTime;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <fsm_manual_run+0x178>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <fsm_manual_run+0x17c>)
 8000af0:	6013      	str	r3, [r2, #0]
                greenValue = greenTime;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <fsm_manual_run+0x180>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <fsm_manual_run+0x184>)
 8000af8:	6013      	str	r3, [r2, #0]
                updateBufferAndClear(2, redTime);
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <fsm_manual_run+0x170>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff ff15 	bl	8000930 <updateBufferAndClear>
            }
            break;
 8000b06:	e019      	b.n	8000b3c <fsm_manual_run+0x15c>
        }
        case MODE2: {
            handleButtonPressed(MODE3, 3, timeredupdate, redTime);
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <fsm_manual_run+0x170>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <fsm_manual_run+0x188>)
 8000b0e:	2103      	movs	r1, #3
 8000b10:	2013      	movs	r0, #19
 8000b12:	f7ff ff25 	bl	8000960 <handleButtonPressed>
            break;
 8000b16:	e012      	b.n	8000b3e <fsm_manual_run+0x15e>
        }
        case MODE3: {
            handleButtonPressed(MODE4, 4, timeyellowupdate, yellowTime);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <fsm_manual_run+0x178>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <fsm_manual_run+0x18c>)
 8000b1e:	2104      	movs	r1, #4
 8000b20:	2014      	movs	r0, #20
 8000b22:	f7ff ff1d 	bl	8000960 <handleButtonPressed>
            break;
 8000b26:	e00a      	b.n	8000b3e <fsm_manual_run+0x15e>
        }
        case MODE4: {
            handleButtonPressed(MAN, 0, timegreenupdate, greenTime);
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <fsm_manual_run+0x180>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <fsm_manual_run+0x190>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2003      	movs	r0, #3
 8000b32:	f7ff ff15 	bl	8000960 <handleButtonPressed>
            break;
 8000b36:	e002      	b.n	8000b3e <fsm_manual_run+0x15e>
        }
        default: {
            break;
 8000b38:	bf00      	nop
 8000b3a:	e000      	b.n	8000b3e <fsm_manual_run+0x15e>
            break;
 8000b3c:	bf00      	nop
        }
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000448 	.word	0x20000448
 8000b48:	20000038 	.word	0x20000038
 8000b4c:	20000170 	.word	0x20000170
 8000b50:	2000003c 	.word	0x2000003c
 8000b54:	20000174 	.word	0x20000174
 8000b58:	20000040 	.word	0x20000040
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	20000044 	.word	0x20000044
 8000b64:	2000017c 	.word	0x2000017c
 8000b68:	08000d15 	.word	0x08000d15
 8000b6c:	08000d61 	.word	0x08000d61
 8000b70:	08000d39 	.word	0x08000d39

08000b74 <fsm_setting_run>:


#include "global.h"
#include "fsm_setting.h"
int status = INIT;
void fsm_setting_run() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    switch(status) {
 8000b78:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <fsm_setting_run+0x78>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d020      	beq.n	8000bc2 <fsm_setting_run+0x4e>
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	dc2c      	bgt.n	8000bde <fsm_setting_run+0x6a>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d002      	beq.n	8000b8e <fsm_setting_run+0x1a>
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d004      	beq.n	8000b96 <fsm_setting_run+0x22>
                status = AUTO;
            }
            break;
        }
        default: {
            break;
 8000b8c:	e027      	b.n	8000bde <fsm_setting_run+0x6a>
            status = AUTO;  // Chuyển trực tiếp sang AUTO
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <fsm_setting_run+0x78>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
            break;
 8000b94:	e028      	b.n	8000be8 <fsm_setting_run+0x74>
            if (isButtonPressed(0)) {
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fc9e 	bl	80004d8 <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01f      	beq.n	8000be2 <fsm_setting_run+0x6e>
                status = MAN;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <fsm_setting_run+0x78>)
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	601a      	str	r2, [r3, #0]
                setTimer(2, 10000); // Timer 3
 8000ba8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 fbc7 	bl	8001340 <setTimer>
                setTimer(3, 500); // Timer 4
 8000bb2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 fbc2 	bl	8001340 <setTimer>
                clearTrafficLight();
 8000bbc:	f000 f8e2 	bl	8000d84 <clearTrafficLight>
            break;
 8000bc0:	e00f      	b.n	8000be2 <fsm_setting_run+0x6e>
            if (isButtonPressed(2) || timer_flag[2] == 1) {
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f7ff fc88 	bl	80004d8 <isButtonPressed>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <fsm_setting_run+0x62>
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <fsm_setting_run+0x7c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d107      	bne.n	8000be6 <fsm_setting_run+0x72>
                status = AUTO;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <fsm_setting_run+0x78>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	601a      	str	r2, [r3, #0]
            break;
 8000bdc:	e003      	b.n	8000be6 <fsm_setting_run+0x72>
            break;
 8000bde:	bf00      	nop
 8000be0:	e002      	b.n	8000be8 <fsm_setting_run+0x74>
            break;
 8000be2:	bf00      	nop
 8000be4:	e000      	b.n	8000be8 <fsm_setting_run+0x74>
            break;
 8000be6:	bf00      	nop
        }
    }
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	20000448 	.word	0x20000448

08000bf4 <Green_Red>:
int yellowTime = 2;
int greenTime = 3;



void Green_Red() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <Green_Red+0x44>)
 8000bfe:	f000 ffa8 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <Green_Red+0x44>)
 8000c08:	f000 ffa3 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2140      	movs	r1, #64	@ 0x40
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <Green_Red+0x44>)
 8000c12:	f000 ff9e 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <Green_Red+0x44>)
 8000c1c:	f000 ff99 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <Green_Red+0x44>)
 8000c26:	f000 ff94 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <Green_Red+0x44>)
 8000c30:	f000 ff8f 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010800 	.word	0x40010800

08000c3c <Yellow_Red>:
void Yellow_Red() {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	480e      	ldr	r0, [pc, #56]	@ (8000c80 <Yellow_Red+0x44>)
 8000c46:	f000 ff84 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <Yellow_Red+0x44>)
 8000c50:	f000 ff7f 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2140      	movs	r1, #64	@ 0x40
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <Yellow_Red+0x44>)
 8000c5a:	f000 ff7a 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2102      	movs	r1, #2
 8000c62:	4807      	ldr	r0, [pc, #28]	@ (8000c80 <Yellow_Red+0x44>)
 8000c64:	f000 ff75 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <Yellow_Red+0x44>)
 8000c6e:	f000 ff70 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <Yellow_Red+0x44>)
 8000c78:	f000 ff6b 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010800 	.word	0x40010800

08000c84 <Red_Green>:
void Red_Green() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	480e      	ldr	r0, [pc, #56]	@ (8000cc8 <Red_Green+0x44>)
 8000c8e:	f000 ff60 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2120      	movs	r1, #32
 8000c96:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <Red_Green+0x44>)
 8000c98:	f000 ff5b 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2140      	movs	r1, #64	@ 0x40
 8000ca0:	4809      	ldr	r0, [pc, #36]	@ (8000cc8 <Red_Green+0x44>)
 8000ca2:	f000 ff56 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4807      	ldr	r0, [pc, #28]	@ (8000cc8 <Red_Green+0x44>)
 8000cac:	f000 ff51 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <Red_Green+0x44>)
 8000cb6:	f000 ff4c 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <Red_Green+0x44>)
 8000cc0:	f000 ff47 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010800 	.word	0x40010800

08000ccc <Red_Yellow>:
void Red_Yellow() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <Red_Yellow+0x44>)
 8000cd6:	f000 ff3c 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2120      	movs	r1, #32
 8000cde:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <Red_Yellow+0x44>)
 8000ce0:	f000 ff37 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <Red_Yellow+0x44>)
 8000cea:	f000 ff32 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <Red_Yellow+0x44>)
 8000cf4:	f000 ff2d 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <Red_Yellow+0x44>)
 8000cfe:	f000 ff28 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2108      	movs	r1, #8
 8000d06:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <Red_Yellow+0x44>)
 8000d08:	f000 ff23 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40010800 	.word	0x40010800

08000d14 <timeredupdate>:

void timeredupdate() {
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <timeredupdate+0x20>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b62      	cmp	r3, #98	@ 0x62
 8000d1e:	dc04      	bgt.n	8000d2a <timeredupdate+0x16>
		redTime++;
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <timeredupdate+0x20>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a03      	ldr	r2, [pc, #12]	@ (8000d34 <timeredupdate+0x20>)
 8000d28:	6013      	str	r3, [r2, #0]
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000003c 	.word	0x2000003c

08000d38 <timegreenupdate>:
void timegreenupdate() {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <timegreenupdate+0x20>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b62      	cmp	r3, #98	@ 0x62
 8000d42:	dc04      	bgt.n	8000d4e <timegreenupdate+0x16>
		greenTime++;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <timegreenupdate+0x24>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <timegreenupdate+0x24>)
 8000d4c:	6013      	str	r3, [r2, #0]

	}
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	2000003c 	.word	0x2000003c
 8000d5c:	20000044 	.word	0x20000044

08000d60 <timeyellowupdate>:
void timeyellowupdate() {
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	if (yellowTime < 99) {
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <timeyellowupdate+0x20>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b62      	cmp	r3, #98	@ 0x62
 8000d6a:	dc04      	bgt.n	8000d76 <timeyellowupdate+0x16>
		yellowTime++;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <timeyellowupdate+0x20>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a03      	ldr	r2, [pc, #12]	@ (8000d80 <timeyellowupdate+0x20>)
 8000d74:	6013      	str	r3, [r2, #0]

	}
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000040 	.word	0x20000040

08000d84 <clearTrafficLight>:
}
void setGreenTime(int greenValue) {
	greenTime = greenValue;
}

void clearTrafficLight() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <clearTrafficLight+0x44>)
 8000d8e:	f000 fee0 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2120      	movs	r1, #32
 8000d96:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <clearTrafficLight+0x44>)
 8000d98:	f000 fedb 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	@ 0x40
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <clearTrafficLight+0x44>)
 8000da2:	f000 fed6 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <clearTrafficLight+0x44>)
 8000dac:	f000 fed1 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2104      	movs	r1, #4
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <clearTrafficLight+0x44>)
 8000db6:	f000 fecc 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <clearTrafficLight+0x44>)
 8000dc0:	f000 fec7 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010800 	.word	0x40010800

08000dcc <blinkRedLed>:

void blinkRedLed() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <blinkRedLed+0x40>)
 8000dd4:	f000 fed5 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000dd8:	2102      	movs	r1, #2
 8000dda:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <blinkRedLed+0x40>)
 8000ddc:	f000 fed1 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2120      	movs	r1, #32
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <blinkRedLed+0x40>)
 8000de6:	f000 feb4 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2140      	movs	r1, #64	@ 0x40
 8000dee:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <blinkRedLed+0x40>)
 8000df0:	f000 feaf 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <blinkRedLed+0x40>)
 8000dfa:	f000 feaa 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2108      	movs	r1, #8
 8000e02:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <blinkRedLed+0x40>)
 8000e04:	f000 fea5 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010800 	.word	0x40010800

08000e10 <blinkYellowLed>:
void blinkYellowLed() {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000e14:	2120      	movs	r1, #32
 8000e16:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <blinkYellowLed+0x40>)
 8000e18:	f000 feb3 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <blinkYellowLed+0x40>)
 8000e20:	f000 feaf 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <blinkYellowLed+0x40>)
 8000e2a:	f000 fe92 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2140      	movs	r1, #64	@ 0x40
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <blinkYellowLed+0x40>)
 8000e34:	f000 fe8d 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <blinkYellowLed+0x40>)
 8000e3e:	f000 fe88 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2108      	movs	r1, #8
 8000e46:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <blinkYellowLed+0x40>)
 8000e48:	f000 fe83 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010800 	.word	0x40010800

08000e54 <blinkGreenLed>:
void blinkGreenLed() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000e58:	2140      	movs	r1, #64	@ 0x40
 8000e5a:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <blinkGreenLed+0x40>)
 8000e5c:	f000 fe91 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000e60:	2108      	movs	r1, #8
 8000e62:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <blinkGreenLed+0x40>)
 8000e64:	f000 fe8d 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4809      	ldr	r0, [pc, #36]	@ (8000e94 <blinkGreenLed+0x40>)
 8000e6e:	f000 fe70 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <blinkGreenLed+0x40>)
 8000e78:	f000 fe6b 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <blinkGreenLed+0x40>)
 8000e82:	f000 fe66 	bl	8001b52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <blinkGreenLed+0x40>)
 8000e8c:	f000 fe61 	bl	8001b52 <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010800 	.word	0x40010800

08000e98 <blinkAllLed>:

void blinkAllLed() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <blinkAllLed+0x38>)
 8000ea0:	f000 fe6f 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <blinkAllLed+0x38>)
 8000ea8:	f000 fe6b 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000eac:	2120      	movs	r1, #32
 8000eae:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <blinkAllLed+0x38>)
 8000eb0:	f000 fe67 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <blinkAllLed+0x38>)
 8000eb8:	f000 fe63 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000ebc:	2140      	movs	r1, #64	@ 0x40
 8000ebe:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <blinkAllLed+0x38>)
 8000ec0:	f000 fe5f 	bl	8001b82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <blinkAllLed+0x38>)
 8000ec8:	f000 fe5b 	bl	8001b82 <HAL_GPIO_TogglePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fb38 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f830 	bl	8000f40 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 f8b6 	bl	8001050 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ee4:	f000 f868 	bl	8000fb8 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ee8:	480f      	ldr	r0, [pc, #60]	@ (8000f28 <main+0x54>)
 8000eea:	f001 fa91 	bl	8002410 <HAL_TIM_Base_Start_IT>
//  SCH_Add_Task(timerRun, 		100, 1);
  SCH_Add_Task(getKeyInput, 	100, 1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2164      	movs	r1, #100	@ 0x64
 8000ef2:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <main+0x58>)
 8000ef4:	f000 f920 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(autoUpdate7Seg, 	100, 5);
 8000ef8:	2205      	movs	r2, #5
 8000efa:	2164      	movs	r1, #100	@ 0x64
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <main+0x5c>)
 8000efe:	f000 f91b 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 	100, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2164      	movs	r1, #100	@ 0x64
 8000f06:	480b      	ldr	r0, [pc, #44]	@ (8000f34 <main+0x60>)
 8000f08:	f000 f916 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 		100, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2164      	movs	r1, #100	@ 0x64
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <main+0x64>)
 8000f12:	f000 f911 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 	100, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2164      	movs	r1, #100	@ 0x64
 8000f1a:	4808      	ldr	r0, [pc, #32]	@ (8000f3c <main+0x68>)
 8000f1c:	f000 f90c 	bl	8001138 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task();
 8000f20:	f000 f99e 	bl	8001260 <SCH_Dispatch_Task>
 8000f24:	e7fc      	b.n	8000f20 <main+0x4c>
 8000f26:	bf00      	nop
 8000f28:	20000180 	.word	0x20000180
 8000f2c:	0800050d 	.word	0x0800050d
 8000f30:	080004ad 	.word	0x080004ad
 8000f34:	08000719 	.word	0x08000719
 8000f38:	080009e1 	.word	0x080009e1
 8000f3c:	08000b75 	.word	0x08000b75

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b090      	sub	sp, #64	@ 0x40
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2228      	movs	r2, #40	@ 0x28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fdea 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fe1c 	bl	8001bb4 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f82:	f000 f8d3 	bl	800112c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	230f      	movs	r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f88a 	bl	80020b8 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000faa:	f000 f8bf 	bl	800112c <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3740      	adds	r7, #64	@ 0x40
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_TIM2_Init+0x94>)
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_TIM2_Init+0x94>)
 8000fde:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000fe2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_TIM2_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_TIM2_Init+0x94>)
 8000fec:	2209      	movs	r2, #9
 8000fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_TIM2_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_TIM2_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ffc:	4813      	ldr	r0, [pc, #76]	@ (800104c <MX_TIM2_Init+0x94>)
 8000ffe:	f001 f9b7 	bl	8002370 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001008:	f000 f890 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_TIM2_Init+0x94>)
 800101a:	f001 fb35 	bl	8002688 <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 f882 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_TIM2_Init+0x94>)
 8001036:	f001 fd0d 	bl	8002a54 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f874 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000180 	.word	0x20000180

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <MX_GPIO_Init+0xb8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a27      	ldr	r2, [pc, #156]	@ (8001108 <MX_GPIO_Init+0xb8>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <MX_GPIO_Init+0xb8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <MX_GPIO_Init+0xb8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <MX_GPIO_Init+0xb8>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <MX_GPIO_Init+0xb8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D2_Pin|D3_Pin|D4_Pin
 8001094:	2200      	movs	r2, #0
 8001096:	f643 71fe 	movw	r1, #16382	@ 0x3ffe
 800109a:	481c      	ldr	r0, [pc, #112]	@ (800110c <MX_GPIO_Init+0xbc>)
 800109c:	f000 fd59 	bl	8001b52 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|LED_RED_Pin
 80010a0:	2200      	movs	r2, #0
 80010a2:	f248 010f 	movw	r1, #32783	@ 0x800f
 80010a6:	481a      	ldr	r0, [pc, #104]	@ (8001110 <MX_GPIO_Init+0xc0>)
 80010a8:	f000 fd53 	bl	8001b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin D4_Pin
                           D5_Pin D6_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           SEG7_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|D4_Pin
 80010ac:	f643 73fe 	movw	r3, #16382	@ 0x3ffe
 80010b0:	60bb      	str	r3, [r7, #8]
                          |D5_Pin|D6_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2302      	movs	r3, #2
 80010bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4811      	ldr	r0, [pc, #68]	@ (800110c <MX_GPIO_Init+0xbc>)
 80010c6:	f000 fbb1 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin LED_RED_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|LED_RED_Pin
 80010ca:	f248 030f 	movw	r3, #32783	@ 0x800f
 80010ce:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	480b      	ldr	r0, [pc, #44]	@ (8001110 <MX_GPIO_Init+0xc0>)
 80010e4:	f000 fba2 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin BUT4_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin|BUT4_Pin;
 80010e8:	23f0      	movs	r3, #240	@ 0xf0
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_GPIO_Init+0xc0>)
 80010fc:	f000 fb96 	bl	800182c <HAL_GPIO_Init>

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00

08001114 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
		SCH_Update();
 800111c:	f000 f84c 	bl	80011b8 <SCH_Update>
		timerRun();
 8001120:	f000 f92c 	bl	800137c <timerRun>
	//	getKeyInput();
	//	autoUpdate7Seg();
	}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <SCH_Add_Task>:

void SCH_Init(void) {

}

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD){
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
	// Find empty slot in the array
	while ((SCH_tasks[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001148:	e002      	b.n	8001150 <SCH_Add_Task+0x18>
	{
		Index++;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
	while ((SCH_tasks[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001150:	4a18      	ldr	r2, [pc, #96]	@ (80011b4 <SCH_Add_Task+0x7c>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <SCH_Add_Task+0x2c>
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b27      	cmp	r3, #39	@ 0x27
 8001162:	d9f2      	bls.n	800114a <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS) {
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2b28      	cmp	r3, #40	@ 0x28
 8001168:	d101      	bne.n	800116e <SCH_Add_Task+0x36>
		return SCH_MAX_TASKS; // Also return an error code
 800116a:	2328      	movs	r3, #40	@ 0x28
 800116c:	e01c      	b.n	80011a8 <SCH_Add_Task+0x70>
	}
	// initialize new task
	SCH_tasks[Index].pTask = pFunction;
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <SCH_Add_Task+0x7c>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	601a      	str	r2, [r3, #0]
	SCH_tasks[Index].Delay = DELAY;
 800117a:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <SCH_Add_Task+0x7c>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3304      	adds	r3, #4
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	601a      	str	r2, [r3, #0]
	SCH_tasks[Index].Period = PERIOD;
 8001188:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SCH_Add_Task+0x7c>)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	4413      	add	r3, r2
 8001190:	3308      	adds	r3, #8
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
	SCH_tasks[Index].RunMe = 0;
 8001196:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <SCH_Add_Task+0x7c>)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	4413      	add	r3, r2
 800119e:	330c      	adds	r3, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	return Index; // return position of task (to allow later deletion)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	b2db      	uxtb	r3, r3
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200001c8 	.word	0x200001c8

080011b8 <SCH_Update>:

void SCH_Update(void) {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
	uint32_t Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e042      	b.n	800124a <SCH_Update+0x92>
		// If there is a task at this location
		if (SCH_tasks[Index].pTask) {
 80011c4:	4a25      	ldr	r2, [pc, #148]	@ (800125c <SCH_Update+0xa4>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d038      	beq.n	8001244 <SCH_Update+0x8c>
			if (SCH_tasks[Index].Delay == 0) {
 80011d2:	4a22      	ldr	r2, [pc, #136]	@ (800125c <SCH_Update+0xa4>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d123      	bne.n	800122a <SCH_Update+0x72>
				// And if the task is due to run
				SCH_tasks[Index].RunMe += 1;
 80011e2:	4a1e      	ldr	r2, [pc, #120]	@ (800125c <SCH_Update+0xa4>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	330c      	adds	r3, #12
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	4a1a      	ldr	r2, [pc, #104]	@ (800125c <SCH_Update+0xa4>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	330c      	adds	r3, #12
 80011fc:	460a      	mov	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks[Index].Period) {
 8001200:	4a16      	ldr	r2, [pc, #88]	@ (800125c <SCH_Update+0xa4>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	3308      	adds	r3, #8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d019      	beq.n	8001244 <SCH_Update+0x8c>
					// Schedule periodic tasks to run again
					SCH_tasks[Index].Delay = SCH_tasks[Index].Period;
 8001210:	4a12      	ldr	r2, [pc, #72]	@ (800125c <SCH_Update+0xa4>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	3308      	adds	r3, #8
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	490f      	ldr	r1, [pc, #60]	@ (800125c <SCH_Update+0xa4>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	440b      	add	r3, r1
 8001224:	3304      	adds	r3, #4
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e00c      	b.n	8001244 <SCH_Update+0x8c>
				}
			}
			else
			{
				// Else the task is not due to run => Delay--
				SCH_tasks[Index].Delay -= 1;
 800122a:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <SCH_Update+0xa4>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	3304      	adds	r3, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	4908      	ldr	r1, [pc, #32]	@ (800125c <SCH_Update+0xa4>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	440b      	add	r3, r1
 8001240:	3304      	adds	r3, #4
 8001242:	601a      	str	r2, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b27      	cmp	r3, #39	@ 0x27
 800124e:	d9b9      	bls.n	80011c4 <SCH_Update+0xc>
			}
		}
	}
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	200001c8 	.word	0x200001c8

08001260 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	uint32_t Index;
	// runs the next task
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	e02a      	b.n	80012c2 <SCH_Dispatch_Task+0x62>
		if (SCH_tasks[Index].RunMe > 0) {
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <SCH_Dispatch_Task+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	330c      	adds	r3, #12
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01f      	beq.n	80012bc <SCH_Dispatch_Task+0x5c>
			(*SCH_tasks[Index].pTask)(); // Run the task
 800127c:	4a15      	ldr	r2, [pc, #84]	@ (80012d4 <SCH_Dispatch_Task+0x74>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4798      	blx	r3
			SCH_tasks[Index].RunMe -= 1; // Reset the flag
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <SCH_Dispatch_Task+0x74>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	330c      	adds	r3, #12
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	b2d9      	uxtb	r1, r3
 8001298:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <SCH_Dispatch_Task+0x74>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	330c      	adds	r3, #12
 80012a2:	460a      	mov	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks[Index].Period == 0) {
 80012a6:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <SCH_Dispatch_Task+0x74>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	4413      	add	r3, r2
 80012ae:	3308      	adds	r3, #8
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <SCH_Dispatch_Task+0x5c>
				SCH_Delete_Task(Index);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f80e 	bl	80012d8 <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b27      	cmp	r3, #39	@ 0x27
 80012c6:	d9d1      	bls.n	800126c <SCH_Dispatch_Task+0xc>
			}
		}
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001c8 	.word	0x200001c8

080012d8 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const uint32_t TASK_INDEX) {
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	int Return_code;
	if (SCH_tasks[TASK_INDEX].pTask == 0) {
 80012e0:	4a16      	ldr	r2, [pc, #88]	@ (800133c <SCH_Delete_Task+0x64>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <SCH_Delete_Task+0x1c>
		Return_code = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e001      	b.n	80012f8 <SCH_Delete_Task+0x20>
	}
	else {
		Return_code = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
	}
	SCH_tasks[TASK_INDEX].pTask = 0x0000;
 80012f8:	4a10      	ldr	r2, [pc, #64]	@ (800133c <SCH_Delete_Task+0x64>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
	SCH_tasks[TASK_INDEX].Delay = 0;
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <SCH_Delete_Task+0x64>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	3304      	adds	r3, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
	SCH_tasks[TASK_INDEX].Period = 0;
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SCH_Delete_Task+0x64>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	3308      	adds	r3, #8
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
	SCH_tasks[TASK_INDEX].RunMe = 0;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <SCH_Delete_Task+0x64>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	330c      	adds	r3, #12
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	return Return_code; // return status
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b2db      	uxtb	r3, r3
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	200001c8 	.word	0x200001c8

08001340 <setTimer>:
	}
}
*/

int TIMER_CYCLE = 10;
void setTimer(int index, int counter){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <setTimer+0x30>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2100      	movs	r1, #0
 8001350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TIMER_CYCLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <setTimer+0x34>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	fb92 f2f3 	sdiv	r2, r2, r3
 800135e:	4906      	ldr	r1, [pc, #24]	@ (8001378 <setTimer+0x38>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000448 	.word	0x20000448
 8001374:	20000048 	.word	0x20000048
 8001378:	20000470 	.word	0x20000470

0800137c <timerRun>:

int timer_flag[10];
int timer_counter[10];
void timerRun(){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e01c      	b.n	80013c2 <timerRun+0x46>
		if (timer_counter[i] >= 0) {
 8001388:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <timerRun+0x58>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db13      	blt.n	80013bc <timerRun+0x40>
			timer_counter[i]--;
 8001394:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <timerRun+0x58>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	490d      	ldr	r1, [pc, #52]	@ (80013d4 <timerRun+0x58>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <timerRun+0x58>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dc04      	bgt.n	80013bc <timerRun+0x40>
				timer_flag[i] = 1;
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <timerRun+0x5c>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2101      	movs	r1, #1
 80013b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b09      	cmp	r3, #9
 80013c6:	dddf      	ble.n	8001388 <timerRun+0xc>
			}
		}
	}
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000470 	.word	0x20000470
 80013d8:	20000448 	.word	0x20000448

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_MspInit+0x5c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <HAL_MspInit+0x5c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_MspInit+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_MspInit+0x60>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001450:	d113      	bne.n	800147a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201c      	movs	r0, #28
 8001470:	f000 f9a5 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 f9be 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <NMI_Handler+0x4>

08001490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <MemManage_Handler+0x4>

080014a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <UsageFault_Handler+0x4>

080014b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f87e 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM2_IRQHandler+0x10>)
 80014e6:	f000 ffdf 	bl	80024a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000180 	.word	0x20000180

080014f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001500:	f7ff fff8 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001506:	490c      	ldr	r1, [pc, #48]	@ (8001538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001508:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <LoopFillZerobss+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800151c:	4c09      	ldr	r4, [pc, #36]	@ (8001544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152a:	f001 fb05 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152e:	f7ff fcd1 	bl	8000ed4 <main>
  bx lr
 8001532:	4770      	bx	lr
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800153c:	08002bc4 	.word	0x08002bc4
  ldr r2, =_sbss
 8001540:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001544:	2000049c 	.word	0x2000049c

08001548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_2_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_Init+0x28>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <HAL_Init+0x28>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f923 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	200f      	movs	r0, #15
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff ff38 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40022000 	.word	0x40022000

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f93b 	bl	8001812 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f903 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000004c 	.word	0x2000004c
 80015d0:	20000054 	.word	0x20000054
 80015d4:	20000050 	.word	0x20000050

080015d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_IncTick+0x1c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_IncTick+0x20>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a03      	ldr	r2, [pc, #12]	@ (80015f8 <HAL_IncTick+0x20>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000054 	.word	0x20000054
 80015f8:	20000498 	.word	0x20000498

080015fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b02      	ldr	r3, [pc, #8]	@ (800160c <HAL_GetTick+0x10>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000498 	.word	0x20000498

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4906      	ldr	r1, [pc, #24]	@ (80016a8 <__NVIC_EnableIRQ+0x34>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	@ (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	@ (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff90 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff2d 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff42 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff90 	bl	8001700 <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5f 	bl	80016ac <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff35 	bl	8001674 <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b08b      	sub	sp, #44	@ 0x2c
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183e:	e161      	b.n	8001b04 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001840:	2201      	movs	r2, #1
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8150 	bne.w	8001afe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a97      	ldr	r2, [pc, #604]	@ (8001ac0 <HAL_GPIO_Init+0x294>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d05e      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001868:	4a95      	ldr	r2, [pc, #596]	@ (8001ac0 <HAL_GPIO_Init+0x294>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d875      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 800186e:	4a95      	ldr	r2, [pc, #596]	@ (8001ac4 <HAL_GPIO_Init+0x298>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d058      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001874:	4a93      	ldr	r2, [pc, #588]	@ (8001ac4 <HAL_GPIO_Init+0x298>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d86f      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 800187a:	4a93      	ldr	r2, [pc, #588]	@ (8001ac8 <HAL_GPIO_Init+0x29c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d052      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001880:	4a91      	ldr	r2, [pc, #580]	@ (8001ac8 <HAL_GPIO_Init+0x29c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d869      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 8001886:	4a91      	ldr	r2, [pc, #580]	@ (8001acc <HAL_GPIO_Init+0x2a0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d04c      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 800188c:	4a8f      	ldr	r2, [pc, #572]	@ (8001acc <HAL_GPIO_Init+0x2a0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d863      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 8001892:	4a8f      	ldr	r2, [pc, #572]	@ (8001ad0 <HAL_GPIO_Init+0x2a4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d046      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001898:	4a8d      	ldr	r2, [pc, #564]	@ (8001ad0 <HAL_GPIO_Init+0x2a4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d85d      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d82a      	bhi.n	80018f8 <HAL_GPIO_Init+0xcc>
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d859      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 80018a6:	a201      	add	r2, pc, #4	@ (adr r2, 80018ac <HAL_GPIO_Init+0x80>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	08001927 	.word	0x08001927
 80018b0:	08001901 	.word	0x08001901
 80018b4:	08001913 	.word	0x08001913
 80018b8:	08001955 	.word	0x08001955
 80018bc:	0800195b 	.word	0x0800195b
 80018c0:	0800195b 	.word	0x0800195b
 80018c4:	0800195b 	.word	0x0800195b
 80018c8:	0800195b 	.word	0x0800195b
 80018cc:	0800195b 	.word	0x0800195b
 80018d0:	0800195b 	.word	0x0800195b
 80018d4:	0800195b 	.word	0x0800195b
 80018d8:	0800195b 	.word	0x0800195b
 80018dc:	0800195b 	.word	0x0800195b
 80018e0:	0800195b 	.word	0x0800195b
 80018e4:	0800195b 	.word	0x0800195b
 80018e8:	0800195b 	.word	0x0800195b
 80018ec:	0800195b 	.word	0x0800195b
 80018f0:	08001909 	.word	0x08001909
 80018f4:	0800191d 	.word	0x0800191d
 80018f8:	4a76      	ldr	r2, [pc, #472]	@ (8001ad4 <HAL_GPIO_Init+0x2a8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fe:	e02c      	b.n	800195a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e029      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	3304      	adds	r3, #4
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e024      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	3308      	adds	r3, #8
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e01f      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	330c      	adds	r3, #12
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e01a      	b.n	800195c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192e:	2304      	movs	r3, #4
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e013      	b.n	800195c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800193c:	2308      	movs	r3, #8
 800193e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	611a      	str	r2, [r3, #16]
          break;
 8001946:	e009      	b.n	800195c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	615a      	str	r2, [r3, #20]
          break;
 8001952:	e003      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x130>
          break;
 800195a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2bff      	cmp	r3, #255	@ 0xff
 8001960:	d801      	bhi.n	8001966 <HAL_GPIO_Init+0x13a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	e001      	b.n	800196a <HAL_GPIO_Init+0x13e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	@ 0xff
 8001970:	d802      	bhi.n	8001978 <HAL_GPIO_Init+0x14c>
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x152>
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	3b08      	subs	r3, #8
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	210f      	movs	r1, #15
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	401a      	ands	r2, r3
 8001990:	6a39      	ldr	r1, [r7, #32]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a9 	beq.w	8001afe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ac:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_GPIO_Init+0x2ac>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a49      	ldr	r2, [pc, #292]	@ (8001ad8 <HAL_GPIO_Init+0x2ac>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_GPIO_Init+0x2ac>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c4:	4a45      	ldr	r2, [pc, #276]	@ (8001adc <HAL_GPIO_Init+0x2b0>)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae0 <HAL_GPIO_Init+0x2b4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1e0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae4 <HAL_GPIO_Init+0x2b8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1dc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae8 <HAL_GPIO_Init+0x2bc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1d8>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1e2>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1e2>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1e2>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a1e:	492f      	ldr	r1, [pc, #188]	@ (8001adc <HAL_GPIO_Init+0x2b0>)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a38:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	492b      	ldr	r1, [pc, #172]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4927      	ldr	r1, [pc, #156]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4921      	ldr	r1, [pc, #132]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	491d      	ldr	r1, [pc, #116]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4917      	ldr	r1, [pc, #92]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4913      	ldr	r1, [pc, #76]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01f      	beq.n	8001af0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	490d      	ldr	r1, [pc, #52]	@ (8001aec <HAL_GPIO_Init+0x2c0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e01f      	b.n	8001afe <HAL_GPIO_Init+0x2d2>
 8001abe:	bf00      	nop
 8001ac0:	10320000 	.word	0x10320000
 8001ac4:	10310000 	.word	0x10310000
 8001ac8:	10220000 	.word	0x10220000
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10120000 	.word	0x10120000
 8001ad4:	10110000 	.word	0x10110000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_GPIO_Init+0x2f4>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4909      	ldr	r1, [pc, #36]	@ (8001b20 <HAL_GPIO_Init+0x2f4>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	3301      	adds	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f47f ae96 	bne.w	8001840 <HAL_GPIO_Init+0x14>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	372c      	adds	r7, #44	@ 0x2c
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e272      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
 8001bec:	4b8c      	ldr	r3, [pc, #560]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b89      	ldr	r3, [pc, #548]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e24c      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76>
 8001c1c:	4b80      	ldr	r3, [pc, #512]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7f      	ldr	r2, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7b      	ldr	r3, [pc, #492]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7a      	ldr	r2, [pc, #488]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a77      	ldr	r2, [pc, #476]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xbc>
 8001c56:	4b72      	ldr	r3, [pc, #456]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a71      	ldr	r2, [pc, #452]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6f      	ldr	r3, [pc, #444]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c70:	4b6b      	ldr	r3, [pc, #428]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fcb4 	bl	80015fc <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fcb0 	bl	80015fc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe4>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fca0 	bl	80015fc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fc9c 	bl	80015fc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1ec      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x10c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b4c      	ldr	r3, [pc, #304]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfa:	4b49      	ldr	r3, [pc, #292]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4939      	ldr	r1, [pc, #228]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fc55 	bl	80015fc <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fc51 	bl	80015fc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1a1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4927      	ldr	r1, [pc, #156]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc34 	bl	80015fc <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc30 	bl	80015fc <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e180      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fc14 	bl	80015fc <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc10 	bl	80015fc <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e160      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fa9c 	bl	8002334 <RCC_Delay>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fbfa 	bl	80015fc <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fbf6 	bl	80015fc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e146      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b88      	ldr	r3, [pc, #544]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b85      	ldr	r3, [pc, #532]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b82      	ldr	r3, [pc, #520]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fbb7 	bl	80015fc <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fbb3 	bl	80015fc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	@ 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e103      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b75      	ldr	r3, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x334>
 8001ece:	4b6a      	ldr	r3, [pc, #424]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x356>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a60      	ldr	r2, [pc, #384]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b58      	ldr	r3, [pc, #352]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fb67 	bl	80015fc <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fb63 	bl	80015fc <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0b1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fb51 	bl	80015fc <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fb4d 	bl	80015fc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e09b      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b3c      	ldr	r3, [pc, #240]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d061      	beq.n	800206c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d146      	bne.n	800203e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fb21 	bl	80015fc <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff fb1d 	bl	80015fc <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e06d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4921      	ldr	r1, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a19      	ldr	r1, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	430b      	orrs	r3, r1
 800200a:	491b      	ldr	r1, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff faf1 	bl	80015fc <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff faed 	bl	80015fc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
 800203c:	e035      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fada 	bl	80015fc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fad6 	bl	80015fc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x498>
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e019      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_OscConfig+0x500>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff fa28 	bl	80015fc <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff fa24 	bl	80015fc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	@ (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f986 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	08002b98 	.word	0x08002b98
 8002284:	2000004c 	.word	0x2000004c
 8002288:	20000050 	.word	0x20000050

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x30>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ba:	e027      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	e027      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c5b      	lsrs	r3, r3, #17
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	4a11      	ldr	r2, [pc, #68]	@ (800232c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e004      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	693b      	ldr	r3, [r7, #16]
}
 8002314:	4618      	mov	r0, r3
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	08002ba8 	.word	0x08002ba8
 800232c:	08002bb8 	.word	0x08002bb8
 8002330:	003d0900 	.word	0x003d0900

08002334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800233c:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <RCC_Delay+0x34>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <RCC_Delay+0x38>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a5b      	lsrs	r3, r3, #9
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002350:	bf00      	nop
  }
  while (Delay --);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	60fa      	str	r2, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <RCC_Delay+0x1c>
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	2000004c 	.word	0x2000004c
 800236c:	10624dd3 	.word	0x10624dd3

08002370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e041      	b.n	8002406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff f852 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f000 fa56 	bl	8002860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d001      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e035      	b.n	8002494 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_TIM_Base_Start_IT+0x4e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002452:	d004      	beq.n	800245e <HAL_TIM_Base_Start_IT+0x4e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <HAL_TIM_Base_Start_IT+0x94>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d010      	beq.n	8002492 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	e007      	b.n	8002492 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400

080024a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d020      	beq.n	800250c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f998 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f98b 	bl	8002816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f99a 	bl	800283a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d020      	beq.n	8002558 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0204 	mvn.w	r2, #4
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f972 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f965 	bl	8002816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f974 	bl	800283a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0208 	mvn.w	r2, #8
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2204      	movs	r2, #4
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f94c 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f93f 	bl	8002816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f94e 	bl	800283a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0210 	mvn.w	r2, #16
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2208      	movs	r2, #8
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f926 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f919 	bl	8002816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f928 	bl	800283a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00c      	beq.n	8002614 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0201 	mvn.w	r2, #1
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe fd80 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa6f 	bl	8002b16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8f8 	bl	800284c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0220 	mvn.w	r2, #32
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa42 	bl	8002b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_TIM_ConfigClockSource+0x1c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e0b4      	b.n	800280e <HAL_TIM_ConfigClockSource+0x186>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026dc:	d03e      	beq.n	800275c <HAL_TIM_ConfigClockSource+0xd4>
 80026de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e2:	f200 8087 	bhi.w	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ea:	f000 8086 	beq.w	80027fa <HAL_TIM_ConfigClockSource+0x172>
 80026ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f2:	d87f      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b70      	cmp	r3, #112	@ 0x70
 80026f6:	d01a      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xa6>
 80026f8:	2b70      	cmp	r3, #112	@ 0x70
 80026fa:	d87b      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 80026fc:	2b60      	cmp	r3, #96	@ 0x60
 80026fe:	d050      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002700:	2b60      	cmp	r3, #96	@ 0x60
 8002702:	d877      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b50      	cmp	r3, #80	@ 0x50
 8002706:	d03c      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xfa>
 8002708:	2b50      	cmp	r3, #80	@ 0x50
 800270a:	d873      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b40      	cmp	r3, #64	@ 0x40
 800270e:	d058      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002710:	2b40      	cmp	r3, #64	@ 0x40
 8002712:	d86f      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b30      	cmp	r3, #48	@ 0x30
 8002716:	d064      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002718:	2b30      	cmp	r3, #48	@ 0x30
 800271a:	d86b      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b20      	cmp	r3, #32
 800271e:	d060      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d867      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d05c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002728:	2b10      	cmp	r3, #16
 800272a:	d05a      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x15a>
 800272c:	e062      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	f000 f96a 	bl	8002a16 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	609a      	str	r2, [r3, #8]
      break;
 800275a:	e04f      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	f000 f953 	bl	8002a16 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800277e:	609a      	str	r2, [r3, #8]
      break;
 8002780:	e03c      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	461a      	mov	r2, r3
 8002790:	f000 f8ca 	bl	8002928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2150      	movs	r1, #80	@ 0x50
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f921 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027a0:	e02c      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ae:	461a      	mov	r2, r3
 80027b0:	f000 f8e8 	bl	8002984 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2160      	movs	r1, #96	@ 0x60
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f911 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027c0:	e01c      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f8aa 	bl	8002928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2140      	movs	r1, #64	@ 0x40
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f901 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e00c      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f000 f8f8 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027f2:	e003      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      break;
 80027f8:	e000      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
	...

08002860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a2b      	ldr	r2, [pc, #172]	@ (8002920 <TIM_Base_SetConfig+0xc0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <TIM_Base_SetConfig+0x28>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287e:	d003      	beq.n	8002888 <TIM_Base_SetConfig+0x28>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a28      	ldr	r2, [pc, #160]	@ (8002924 <TIM_Base_SetConfig+0xc4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a20      	ldr	r2, [pc, #128]	@ (8002920 <TIM_Base_SetConfig+0xc0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <TIM_Base_SetConfig+0xc4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <TIM_Base_SetConfig+0xc0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d103      	bne.n	80028f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f023 0201 	bic.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]
  }
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400

08002928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 030a 	bic.w	r3, r3, #10
 8002964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0210 	bic.w	r2, r3, #16
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	031b      	lsls	r3, r3, #12
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f043 0307 	orr.w	r3, r3, #7
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b087      	sub	sp, #28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	021a      	lsls	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e041      	b.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a14      	ldr	r2, [pc, #80]	@ (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a10      	ldr	r2, [pc, #64]	@ (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10c      	bne.n	8002ade <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400

08002b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <memset>:
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4d0c      	ldr	r5, [pc, #48]	@ (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4c0d      	ldr	r4, [pc, #52]	@ (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	f000 f81a 	bl	8002b80 <_init>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b78 <__libc_init_array+0x40>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08002bbc 	.word	0x08002bbc
 8002b74:	08002bbc 	.word	0x08002bbc
 8002b78:	08002bbc 	.word	0x08002bbc
 8002b7c:	08002bc0 	.word	0x08002bc0

08002b80 <_init>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr

08002b8c <_fini>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr
