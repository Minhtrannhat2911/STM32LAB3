
LAB3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004624  08004624  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800462c  0800462c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004630  08004630  00005630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004634  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  08004690  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08004690  00006304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc79  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228c  00000000  00000000  00013cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00015f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  00016d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d1  00000000  00000000  000177c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff51  00000000  00000000  0002fc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d356  00000000  00000000  0003fbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccf38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e18  00000000  00000000  000ccf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d0d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800458c 	.word	0x0800458c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800458c 	.word	0x0800458c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <isCmdEqual>:

static uint8_t cmd_flag = INIT;
static uint8_t cmd_data[MAX_CMD_SIZE] = {0};
static uint8_t cmd_data_index = 0;

static int isCmdEqual(const uint8_t *str, const char *cmd) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    return strncmp((const char *)str, cmd, MAX_CMD_SIZE) == 0;
 800066e:	2203      	movs	r2, #3
 8000670:	6839      	ldr	r1, [r7, #0]
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f003 faf0 	bl	8003c58 <strncmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2db      	uxtb	r3, r3
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <cmd_parser_fsm>:

void cmd_parser_fsm() {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    switch (status1) {
 8000690:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <cmd_parser_fsm+0xc4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d033      	beq.n	8000700 <cmd_parser_fsm+0x74>
 8000698:	2b02      	cmp	r3, #2
 800069a:	dc52      	bgt.n	8000742 <cmd_parser_fsm+0xb6>
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <cmd_parser_fsm+0x1a>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d008      	beq.n	80006b6 <cmd_parser_fsm+0x2a>
        memset(cmd_data, 0, MAX_CMD_SIZE); // Clear cmd_data after processing
        status1 = INIT;
        break;

    default:
        break;
 80006a4:	e04d      	b.n	8000742 <cmd_parser_fsm+0xb6>
        if (buffer_byte == '!') {
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <cmd_parser_fsm+0xc8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b21      	cmp	r3, #33	@ 0x21
 80006ac:	d14b      	bne.n	8000746 <cmd_parser_fsm+0xba>
            status1 = READING;
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <cmd_parser_fsm+0xc4>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
        break;
 80006b4:	e047      	b.n	8000746 <cmd_parser_fsm+0xba>
        if (buffer_byte != '!' && buffer_byte != '#') {
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <cmd_parser_fsm+0xc8>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b21      	cmp	r3, #33	@ 0x21
 80006bc:	d015      	beq.n	80006ea <cmd_parser_fsm+0x5e>
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <cmd_parser_fsm+0xc8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b23      	cmp	r3, #35	@ 0x23
 80006c4:	d011      	beq.n	80006ea <cmd_parser_fsm+0x5e>
            cmd_data[cmd_data_index++] = buffer_byte;
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <cmd_parser_fsm+0xcc>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	b2d1      	uxtb	r1, r2
 80006ce:	4a22      	ldr	r2, [pc, #136]	@ (8000758 <cmd_parser_fsm+0xcc>)
 80006d0:	7011      	strb	r1, [r2, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <cmd_parser_fsm+0xc8>)
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <cmd_parser_fsm+0xd0>)
 80006da:	5499      	strb	r1, [r3, r2]
            if (cmd_data_index >= MAX_CMD_SIZE) {
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <cmd_parser_fsm+0xcc>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d902      	bls.n	80006ea <cmd_parser_fsm+0x5e>
                cmd_data_index = 0; // Reset if overflow
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <cmd_parser_fsm+0xcc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
        if (buffer_byte == '#') {
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <cmd_parser_fsm+0xc8>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b23      	cmp	r3, #35	@ 0x23
 80006f0:	d12b      	bne.n	800074a <cmd_parser_fsm+0xbe>
            status1 = STOP;
 80006f2:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <cmd_parser_fsm+0xc4>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
            cmd_data_index = 0;
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <cmd_parser_fsm+0xcc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
        break;
 80006fe:	e024      	b.n	800074a <cmd_parser_fsm+0xbe>
        if (isCmdEqual(cmd_data, "RST")) {
 8000700:	4917      	ldr	r1, [pc, #92]	@ (8000760 <cmd_parser_fsm+0xd4>)
 8000702:	4816      	ldr	r0, [pc, #88]	@ (800075c <cmd_parser_fsm+0xd0>)
 8000704:	f7ff ffae 	bl	8000664 <isCmdEqual>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <cmd_parser_fsm+0x90>
            cmd_flag = RST;
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <cmd_parser_fsm+0xd8>)
 8000710:	2208      	movs	r2, #8
 8000712:	701a      	strb	r2, [r3, #0]
            setTimer1(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fa85 	bl	8000c24 <setTimer1>
 800071a:	e009      	b.n	8000730 <cmd_parser_fsm+0xa4>
        } else if (isCmdEqual(cmd_data, "OK")) {
 800071c:	4912      	ldr	r1, [pc, #72]	@ (8000768 <cmd_parser_fsm+0xdc>)
 800071e:	480f      	ldr	r0, [pc, #60]	@ (800075c <cmd_parser_fsm+0xd0>)
 8000720:	f7ff ffa0 	bl	8000664 <isCmdEqual>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <cmd_parser_fsm+0xa4>
            cmd_flag = OK;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <cmd_parser_fsm+0xd8>)
 800072c:	2209      	movs	r2, #9
 800072e:	701a      	strb	r2, [r3, #0]
        memset(cmd_data, 0, MAX_CMD_SIZE); // Clear cmd_data after processing
 8000730:	2203      	movs	r2, #3
 8000732:	2100      	movs	r1, #0
 8000734:	4809      	ldr	r0, [pc, #36]	@ (800075c <cmd_parser_fsm+0xd0>)
 8000736:	f003 fa87 	bl	8003c48 <memset>
        status1 = INIT;
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <cmd_parser_fsm+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
        break;
 8000740:	e004      	b.n	800074c <cmd_parser_fsm+0xc0>
        break;
 8000742:	bf00      	nop
 8000744:	e002      	b.n	800074c <cmd_parser_fsm+0xc0>
        break;
 8000746:	bf00      	nop
 8000748:	e000      	b.n	800074c <cmd_parser_fsm+0xc0>
        break;
 800074a:	bf00      	nop
    }
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000078 	.word	0x20000078
 8000754:	2000007c 	.word	0x2000007c
 8000758:	200000a7 	.word	0x200000a7
 800075c:	200000a4 	.word	0x200000a4
 8000760:	080045a4 	.word	0x080045a4
 8000764:	200000a0 	.word	0x200000a0
 8000768:	080045a8 	.word	0x080045a8

0800076c <uart_comms_fsm>:

void uart_comms_fsm() {
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af02      	add	r7, sp, #8
    static char last_packet[50] = {0};  // Store the last packet
    static float adc_stored_value = 0.0f; // Store the previous ADC value
    static int adc_locked = 0; // Lock flag for ADC value


    switch (cmd_flag) {
 8000772:	4b39      	ldr	r3, [pc, #228]	@ (8000858 <uart_comms_fsm+0xec>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b08      	cmp	r3, #8
 8000778:	d002      	beq.n	8000780 <uart_comms_fsm+0x14>
 800077a:	2b09      	cmp	r3, #9
 800077c:	d058      	beq.n	8000830 <uart_comms_fsm+0xc4>
        HAL_UART_Transmit(&huart2, (uint8_t *)"STOP#\r\n", strlen("STOP#\r\n"), 500);
        cmd_flag = INIT;  // Reset FSM state
        break;

    default:
        break;
 800077e:	e066      	b.n	800084e <uart_comms_fsm+0xe2>
        if (!adc_locked) {
 8000780:	4b36      	ldr	r3, [pc, #216]	@ (800085c <uart_comms_fsm+0xf0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d118      	bne.n	80007ba <uart_comms_fsm+0x4e>
            adc_stored_value = HAL_ADC_GetValue(&hadc1) * 5.0f / 4096.0f;
 8000788:	4835      	ldr	r0, [pc, #212]	@ (8000860 <uart_comms_fsm+0xf4>)
 800078a:	f000 fe0f 	bl	80013ac <HAL_ADC_GetValue>
 800078e:	4603      	mov	r3, r0
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd99 	bl	80002c8 <__aeabi_ui2f>
 8000796:	4603      	mov	r3, r0
 8000798:	4932      	ldr	r1, [pc, #200]	@ (8000864 <uart_comms_fsm+0xf8>)
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fdec 	bl	8000378 <__aeabi_fmul>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe9a 	bl	80004e0 <__aeabi_fdiv>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <uart_comms_fsm+0xfc>)
 80007b2:	601a      	str	r2, [r3, #0]
            adc_locked = 1;  // Lock ADC value
 80007b4:	4b29      	ldr	r3, [pc, #164]	@ (800085c <uart_comms_fsm+0xf0>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
        if (timer1_flag == 1) {
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <uart_comms_fsm+0x100>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d144      	bne.n	800084c <uart_comms_fsm+0xe0>
            int int_part = (int)adc_stored_value;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <uart_comms_fsm+0xfc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff26 	bl	8000618 <__aeabi_f2iz>
 80007cc:	4603      	mov	r3, r0
 80007ce:	607b      	str	r3, [r7, #4]
            int dec_part = (int)((adc_stored_value - int_part) * 100);
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <uart_comms_fsm+0xfc>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fd7b 	bl	80002d0 <__aeabi_i2f>
 80007da:	4603      	mov	r3, r0
 80007dc:	4619      	mov	r1, r3
 80007de:	4620      	mov	r0, r4
 80007e0:	f7ff fcc0 	bl	8000164 <__aeabi_fsub>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4922      	ldr	r1, [pc, #136]	@ (8000870 <uart_comms_fsm+0x104>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fdc5 	bl	8000378 <__aeabi_fmul>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff11 	bl	8000618 <__aeabi_f2iz>
 80007f6:	4603      	mov	r3, r0
 80007f8:	603b      	str	r3, [r7, #0]
            snprintf(last_packet, sizeof(last_packet), "!ADC=%d.%02d#\r\n", int_part, dec_part);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <uart_comms_fsm+0x108>)
 8000802:	2132      	movs	r1, #50	@ 0x32
 8000804:	481c      	ldr	r0, [pc, #112]	@ (8000878 <uart_comms_fsm+0x10c>)
 8000806:	f003 f9eb 	bl	8003be0 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)last_packet, strlen(last_packet), 500);
 800080a:	481b      	ldr	r0, [pc, #108]	@ (8000878 <uart_comms_fsm+0x10c>)
 800080c:	f7ff fc9e 	bl	800014c <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000818:	4917      	ldr	r1, [pc, #92]	@ (8000878 <uart_comms_fsm+0x10c>)
 800081a:	4818      	ldr	r0, [pc, #96]	@ (800087c <uart_comms_fsm+0x110>)
 800081c:	f002 fbc6 	bl	8002fac <HAL_UART_Transmit>
            setTimer1(300);  // 3 seconds
 8000820:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000824:	f000 f9fe 	bl	8000c24 <setTimer1>
            timer1_flag = 0;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <uart_comms_fsm+0x100>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
        break;
 800082e:	e00d      	b.n	800084c <uart_comms_fsm+0xe0>
        adc_locked = 0;  // Unlock for new ADC value updates
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <uart_comms_fsm+0xf0>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)"STOP#\r\n", strlen("STOP#\r\n"), 500);
 8000836:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800083a:	2207      	movs	r2, #7
 800083c:	4910      	ldr	r1, [pc, #64]	@ (8000880 <uart_comms_fsm+0x114>)
 800083e:	480f      	ldr	r0, [pc, #60]	@ (800087c <uart_comms_fsm+0x110>)
 8000840:	f002 fbb4 	bl	8002fac <HAL_UART_Transmit>
        cmd_flag = INIT;  // Reset FSM state
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <uart_comms_fsm+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
        break;
 800084a:	e000      	b.n	800084e <uart_comms_fsm+0xe2>
        break;
 800084c:	bf00      	nop
    }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	bf00      	nop
 8000858:	200000a0 	.word	0x200000a0
 800085c:	200000a8 	.word	0x200000a8
 8000860:	200000e4 	.word	0x200000e4
 8000864:	40a00000 	.word	0x40a00000
 8000868:	200000ac 	.word	0x200000ac
 800086c:	200001a8 	.word	0x200001a8
 8000870:	42c80000 	.word	0x42c80000
 8000874:	080045ac 	.word	0x080045ac
 8000878:	200000b0 	.word	0x200000b0
 800087c:	2000015c 	.word	0x2000015c
 8000880:	080045bc 	.word	0x080045bc

08000884 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <HAL_UART_RxCpltCallback+0x60>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d122      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
 8000896:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800089a:	2201      	movs	r2, #1
 800089c:	4912      	ldr	r1, [pc, #72]	@ (80008e8 <HAL_UART_RxCpltCallback+0x64>)
 800089e:	4813      	ldr	r0, [pc, #76]	@ (80008ec <HAL_UART_RxCpltCallback+0x68>)
 80008a0:	f002 fb84 	bl	8002fac <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_UART_RxCpltCallback+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_UART_RxCpltCallback+0x64>)
 80008ac:	7819      	ldrb	r1, [r3, #0]
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <HAL_UART_RxCpltCallback+0x70>)
 80008b0:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_UART_RxCpltCallback+0x6c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_UART_RxCpltCallback+0x6c>)
 80008bc:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE)
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_UART_RxCpltCallback+0x6c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b1e      	cmp	r3, #30
 80008c4:	d102      	bne.n	80008cc <HAL_UART_RxCpltCallback+0x48>
			index_buffer = 0;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_UART_RxCpltCallback+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <HAL_UART_RxCpltCallback+0x74>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	4904      	ldr	r1, [pc, #16]	@ (80008e8 <HAL_UART_RxCpltCallback+0x64>)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_UART_RxCpltCallback+0x68>)
 80008d8:	f002 fbf3 	bl	80030c2 <HAL_UART_Receive_IT>
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	2000015c 	.word	0x2000015c
 80008f0:	2000009e 	.word	0x2000009e
 80008f4:	20000080 	.word	0x20000080
 80008f8:	2000009f 	.word	0x2000009f

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 fb6c 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f83c 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 f93e 	bl	8000b88 <MX_GPIO_Init>
  MX_ADC1_Init();
 800090c:	f000 f888 	bl	8000a20 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000910:	f000 f8c4 	bl	8000a9c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000914:	f000 f90e 	bl	8000b34 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000918:	4812      	ldr	r0, [pc, #72]	@ (8000964 <main+0x68>)
 800091a:	f001 ff6b 	bl	80027f4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	4911      	ldr	r1, [pc, #68]	@ (8000968 <main+0x6c>)
 8000922:	4812      	ldr	r0, [pc, #72]	@ (800096c <main+0x70>)
 8000924:	f002 fbcd 	bl	80030c2 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <main+0x74>)
 800092a:	f000 fc91 	bl	8001250 <HAL_ADC_Start>
  setTimer2(50);
 800092e:	2032      	movs	r0, #50	@ 0x32
 8000930:	f000 f98c 	bl	8000c4c <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (timer2_flag == 1) {
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <main+0x78>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d106      	bne.n	800094a <main+0x4e>
	  			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800093c:	2120      	movs	r1, #32
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <main+0x7c>)
 8000940:	f001 fa28 	bl	8001d94 <HAL_GPIO_TogglePin>
	  			setTimer2(50);
 8000944:	2032      	movs	r0, #50	@ 0x32
 8000946:	f000 f981 	bl	8000c4c <setTimer2>
	  		}
	  		if (buffer_flag == 1) {
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <main+0x80>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d104      	bne.n	800095c <main+0x60>
	  			cmd_parser_fsm();
 8000952:	f7ff fe9b 	bl	800068c <cmd_parser_fsm>
	  			buffer_flag = 0;
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <main+0x80>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
	  		}
	  		uart_comms_fsm();
 800095c:	f7ff ff06 	bl	800076c <uart_comms_fsm>
	  if (timer2_flag == 1) {
 8000960:	e7e8      	b.n	8000934 <main+0x38>
 8000962:	bf00      	nop
 8000964:	20000114 	.word	0x20000114
 8000968:	2000007c 	.word	0x2000007c
 800096c:	2000015c 	.word	0x2000015c
 8000970:	200000e4 	.word	0x200000e4
 8000974:	200001b0 	.word	0x200001b0
 8000978:	40010800 	.word	0x40010800
 800097c:	2000009f 	.word	0x2000009f

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	@ 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800098a:	2228      	movs	r2, #40	@ 0x28
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f003 f95a 	bl	8003c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009bc:	2300      	movs	r3, #0
 80009be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f9ff 	bl	8001dc8 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80009d0:	f000 f922 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fc6c 	bl	80022cc <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009fa:	f000 f90d 	bl	8000c18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009fe:	2302      	movs	r3, #2
 8000a00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fded 	bl	80025e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a14:	f000 f900 	bl	8000c18 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	@ 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <MX_ADC1_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a4a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a5e:	f000 fb1f 	bl	80010a0 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 f8d6 	bl	8000c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a7e:	f000 fca1 	bl	80013c4 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 f8c6 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000e4 	.word	0x200000e4
 8000a98:	40012400 	.word	0x40012400

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000ac2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000ad0:	2209      	movs	r2, #9
 8000ad2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae0:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000ae2:	f001 fe37 	bl	8002754 <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aec:	f000 f894 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4619      	mov	r1, r3
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000afe:	f001 ffb5 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 f886 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_TIM2_Init+0x94>)
 8000b1a:	f002 f98d 	bl	8002e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f000 f878 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000114 	.word	0x20000114

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f002 f9ce 	bl	8002f0c <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f84f 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000015c 	.word	0x2000015c
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_GPIO_Init+0x74>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a16      	ldr	r2, [pc, #88]	@ (8000bfc <MX_GPIO_Init+0x74>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_GPIO_Init+0x74>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <MX_GPIO_Init+0x78>)
 8000bba:	f001 f8d3 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <MX_GPIO_Init+0x78>)
 8000bd6:	f000 ff49 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bda:	2340      	movs	r3, #64	@ 0x40
 8000bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_GPIO_Init+0x78>)
 8000bee:	f000 ff3d 	bl	8001a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800

08000c04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000c0c:	f000 f832 	bl	8000c74 <timerRun>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <setTimer1>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000c2c:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <setTimer1+0x20>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <setTimer1+0x24>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200001a4 	.word	0x200001a4
 8000c48:	200001a8 	.word	0x200001a8

08000c4c <setTimer2>:

void setTimer2(int duration) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000c54:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <setTimer2+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <setTimer2+0x24>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001ac 	.word	0x200001ac
 8000c70:	200001b0 	.word	0x200001b0

08000c74 <timerRun>:

void timerRun() {
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <timerRun+0x4c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	dd0b      	ble.n	8000c98 <timerRun+0x24>
		timer1_counter--;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <timerRun+0x4c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <timerRun+0x4c>)
 8000c88:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) {
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <timerRun+0x4c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <timerRun+0x24>
			timer1_flag = 1;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <timerRun+0x50>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <timerRun+0x54>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dd0b      	ble.n	8000cb8 <timerRun+0x44>
		timer2_counter--;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <timerRun+0x54>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <timerRun+0x54>)
 8000ca8:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) {
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <timerRun+0x54>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <timerRun+0x44>
			timer2_flag = 1;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <timerRun+0x58>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200001a4 	.word	0x200001a4
 8000cc4:	200001a8 	.word	0x200001a8
 8000cc8:	200001ac 	.word	0x200001ac
 8000ccc:	200001b0 	.word	0x200001b0

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_MspInit+0x60>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_MspInit+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000

08000d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <HAL_ADC_MspInit+0x6c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d121      	bne.n	8000d98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_ADC_MspInit+0x70>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <HAL_ADC_MspInit+0x70>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0x70>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_ADC_MspInit+0x70>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <HAL_ADC_MspInit+0x70>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_ADC_MspInit+0x70>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d84:	2301      	movs	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_ADC_MspInit+0x74>)
 8000d94:	f000 fe6a 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40012400 	.word	0x40012400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dbc:	d113      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	201c      	movs	r0, #28
 8000ddc:	f000 fd5d 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de0:	201c      	movs	r0, #28
 8000de2:	f000 fd76 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_UART_MspInit+0x98>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d137      	bne.n	8000e84 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1e:	61d3      	str	r3, [r2, #28]
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e44:	2304      	movs	r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	480f      	ldr	r0, [pc, #60]	@ (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e58:	f000 fe08 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4809      	ldr	r0, [pc, #36]	@ (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e70:	f000 fdfc 	bl	8001a6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2026      	movs	r0, #38	@ 0x26
 8000e7a:	f000 fd0e 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e7e:	2026      	movs	r0, #38	@ 0x26
 8000e80:	f000 fd27 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010800 	.word	0x40010800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8be 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <TIM2_IRQHandler+0x10>)
 8000ef6:	f001 fcc9 	bl	800288c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000114 	.word	0x20000114

08000f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <USART2_IRQHandler+0x10>)
 8000f0a:	f002 f8ff 	bl	800310c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000015c 	.word	0x2000015c

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f002 fe98 	bl	8003c7c <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20002800 	.word	0x20002800
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200001b4 	.word	0x200001b4
 8000f80:	20000308 	.word	0x20000308

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff fff8 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f96:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fac:	4c09      	ldr	r4, [pc, #36]	@ (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f002 fe65 	bl	8003c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fc9d 	bl	80008fc <main>
  bx lr
 8000fc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fcc:	08004634 	.word	0x08004634
  ldr r2, =_sbss
 8000fd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fd4:	20000304 	.word	0x20000304

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 fc49 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fe6a 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fc61 	bl	80018ee <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 fc29 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x20>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000008 	.word	0x20000008
 8001088:	200001b8 	.word	0x200001b8

0800108c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	@ (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	200001b8 	.word	0x200001b8

080010a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0be      	b.n	8001240 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fe28 	bl	8000d34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 fabf 	bl	8001668 <ADC_ConversionStop_Disable>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8099 	bne.w	800122e <HAL_ADC_Init+0x18e>
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 8095 	bne.w	800122e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	f043 0202 	orr.w	r2, r3, #2
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001120:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7b1b      	ldrb	r3, [r3, #12]
 8001126:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001128:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4313      	orrs	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001138:	d003      	beq.n	8001142 <HAL_ADC_Init+0xa2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_ADC_Init+0xa8>
 8001142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001146:	e000      	b.n	800114a <HAL_ADC_Init+0xaa>
 8001148:	2300      	movs	r3, #0
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7d1b      	ldrb	r3, [r3, #20]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d119      	bne.n	800118c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b1b      	ldrb	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	3b01      	subs	r3, #1
 8001166:	035a      	lsls	r2, r3, #13
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	e00b      	b.n	800118c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	f043 0220 	orr.w	r2, r3, #32
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <HAL_ADC_Init+0x1a8>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011bc:	d003      	beq.n	80011c6 <HAL_ADC_Init+0x126>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d104      	bne.n	80011d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	051b      	lsls	r3, r3, #20
 80011ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_ADC_Init+0x1ac>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120a:	e018      	b.n	800123e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	f023 0312 	bic.w	r3, r3, #18
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	f043 0210 	orr.w	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	ffe1f7fd 	.word	0xffe1f7fd
 800124c:	ff1f0efe 	.word	0xff1f0efe

08001250 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_ADC_Start+0x1a>
 8001266:	2302      	movs	r3, #2
 8001268:	e098      	b.n	800139c <HAL_ADC_Start+0x14c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f99e 	bl	80015b4 <ADC_Enable>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 8087 	bne.w	8001392 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a41      	ldr	r2, [pc, #260]	@ (80013a4 <HAL_ADC_Start+0x154>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d105      	bne.n	80012ae <HAL_ADC_Start+0x5e>
 80012a2:	4b41      	ldr	r3, [pc, #260]	@ (80013a8 <HAL_ADC_Start+0x158>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d026      	beq.n	8001316 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d8:	e01d      	b.n	8001316 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2f      	ldr	r2, [pc, #188]	@ (80013a8 <HAL_ADC_Start+0x158>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d004      	beq.n	80012fa <HAL_ADC_Start+0xaa>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2b      	ldr	r2, [pc, #172]	@ (80013a4 <HAL_ADC_Start+0x154>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10d      	bne.n	8001316 <HAL_ADC_Start+0xc6>
 80012fa:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <HAL_ADC_Start+0x158>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800130e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001326:	f023 0206 	bic.w	r2, r3, #6
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800132e:	e002      	b.n	8001336 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f06f 0202 	mvn.w	r2, #2
 8001346:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001352:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001356:	d113      	bne.n	8001380 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800135c:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <HAL_ADC_Start+0x154>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d105      	bne.n	800136e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_ADC_Start+0x158>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	e00c      	b.n	800139a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e003      	b.n	800139a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012800 	.word	0x40012800
 80013a8:	40012400 	.word	0x40012400

080013ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x20>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e0dc      	b.n	800159e <HAL_ADC_ConfigChannel+0x1da>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d81c      	bhi.n	800142e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b05      	subs	r3, #5
 8001406:	221f      	movs	r2, #31
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	4019      	ands	r1, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	fa00 f203 	lsl.w	r2, r0, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	635a      	str	r2, [r3, #52]	@ 0x34
 800142c:	e03c      	b.n	80014a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d81c      	bhi.n	8001470 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3b23      	subs	r3, #35	@ 0x23
 8001448:	221f      	movs	r2, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	4019      	ands	r1, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	3b23      	subs	r3, #35	@ 0x23
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
 800146e:	e01b      	b.n	80014a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b41      	subs	r3, #65	@ 0x41
 8001482:	221f      	movs	r2, #31
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	4019      	ands	r1, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b41      	subs	r3, #65	@ 0x41
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d91c      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68d9      	ldr	r1, [r3, #12]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	3b1e      	subs	r3, #30
 80014c2:	2207      	movs	r2, #7
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	3b1e      	subs	r3, #30
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	e019      	b.n	800151e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6919      	ldr	r1, [r3, #16]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	2207      	movs	r2, #7
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	4019      	ands	r1, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6898      	ldr	r0, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800152a:	2b11      	cmp	r3, #17
 800152c:	d132      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d125      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d126      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001554:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b10      	cmp	r3, #16
 800155c:	d11a      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9a      	lsrs	r2, r3, #18
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001574:	e002      	b.n	800157c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x1b2>
 8001582:	e007      	b.n	8001594 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40012400 	.word	0x40012400
 80015ac:	20000000 	.word	0x20000000
 80015b0:	431bde83 	.word	0x431bde83

080015b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d040      	beq.n	8001654 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0201 	orr.w	r2, r2, #1
 80015e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <ADC_Enable+0xac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <ADC_Enable+0xb0>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015f0:	e002      	b.n	80015f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f9      	bne.n	80015f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015fe:	f7ff fd45 	bl	800108c <HAL_GetTick>
 8001602:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001604:	e01f      	b.n	8001646 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001606:	f7ff fd41 	bl	800108c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d918      	bls.n	8001646 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b01      	cmp	r3, #1
 8001620:	d011      	beq.n	8001646 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	f043 0210 	orr.w	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	f043 0201 	orr.w	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e007      	b.n	8001656 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d1d8      	bne.n	8001606 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000000 	.word	0x20000000
 8001664:	431bde83 	.word	0x431bde83

08001668 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d12e      	bne.n	80016e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001692:	f7ff fcfb 	bl	800108c <HAL_GetTick>
 8001696:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001698:	e01b      	b.n	80016d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800169a:	f7ff fcf7 	bl	800108c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d914      	bls.n	80016d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10d      	bne.n	80016d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	f043 0210 	orr.w	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e007      	b.n	80016e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d0dc      	beq.n	800169a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	@ (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff90 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff2d 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff42 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff35 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d008      	beq.n	8001930 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e020      	b.n	8001972 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 020e 	bic.w	r2, r2, #14
 800193e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d005      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e051      	b.n	8001a44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 020e 	bic.w	r2, r2, #14
 80019ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_DMA_Abort_IT+0xd4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d029      	beq.n	8001a1e <HAL_DMA_Abort_IT+0xa2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <HAL_DMA_Abort_IT+0xd8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x9e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_DMA_Abort_IT+0xdc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x98>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a5c <HAL_DMA_Abort_IT+0xe0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x92>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001a60 <HAL_DMA_Abort_IT+0xe4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00a      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x8c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <HAL_DMA_Abort_IT+0xe8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <HAL_DMA_Abort_IT+0x86>
 80019fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a00:	e00e      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a06:	e00b      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a0c:	e008      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a12:	e005      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a18:	e002      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	e000      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_DMA_Abort_IT+0xec>)
 8001a22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
    } 
  }
  return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40020008 	.word	0x40020008
 8001a54:	4002001c 	.word	0x4002001c
 8001a58:	40020030 	.word	0x40020030
 8001a5c:	40020044 	.word	0x40020044
 8001a60:	40020058 	.word	0x40020058
 8001a64:	4002006c 	.word	0x4002006c
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	@ 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e161      	b.n	8001d44 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a80:	2201      	movs	r2, #1
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8150 	bne.w	8001d3e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a97      	ldr	r2, [pc, #604]	@ (8001d00 <HAL_GPIO_Init+0x294>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d05e      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a95      	ldr	r2, [pc, #596]	@ (8001d00 <HAL_GPIO_Init+0x294>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d875      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aae:	4a95      	ldr	r2, [pc, #596]	@ (8001d04 <HAL_GPIO_Init+0x298>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d058      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a93      	ldr	r2, [pc, #588]	@ (8001d04 <HAL_GPIO_Init+0x298>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d86f      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aba:	4a93      	ldr	r2, [pc, #588]	@ (8001d08 <HAL_GPIO_Init+0x29c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d052      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a91      	ldr	r2, [pc, #580]	@ (8001d08 <HAL_GPIO_Init+0x29c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d869      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ac6:	4a91      	ldr	r2, [pc, #580]	@ (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04c      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001acc:	4a8f      	ldr	r2, [pc, #572]	@ (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d863      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ad2:	4a8f      	ldr	r2, [pc, #572]	@ (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d046      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a8d      	ldr	r2, [pc, #564]	@ (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d85d      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d82a      	bhi.n	8001b38 <HAL_GPIO_Init+0xcc>
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d859      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aec <HAL_GPIO_Init+0x80>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b53 	.word	0x08001b53
 8001af8:	08001b95 	.word	0x08001b95
 8001afc:	08001b9b 	.word	0x08001b9b
 8001b00:	08001b9b 	.word	0x08001b9b
 8001b04:	08001b9b 	.word	0x08001b9b
 8001b08:	08001b9b 	.word	0x08001b9b
 8001b0c:	08001b9b 	.word	0x08001b9b
 8001b10:	08001b9b 	.word	0x08001b9b
 8001b14:	08001b9b 	.word	0x08001b9b
 8001b18:	08001b9b 	.word	0x08001b9b
 8001b1c:	08001b9b 	.word	0x08001b9b
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b9b 	.word	0x08001b9b
 8001b28:	08001b9b 	.word	0x08001b9b
 8001b2c:	08001b9b 	.word	0x08001b9b
 8001b30:	08001b49 	.word	0x08001b49
 8001b34:	08001b5d 	.word	0x08001b5d
 8001b38:	4a76      	ldr	r2, [pc, #472]	@ (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b3e:	e02c      	b.n	8001b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e029      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e024      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	3308      	adds	r3, #8
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e01f      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	330c      	adds	r3, #12
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e01a      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e013      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	611a      	str	r2, [r3, #16]
          break;
 8001b86:	e009      	b.n	8001b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	615a      	str	r2, [r3, #20]
          break;
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          break;
 8001b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ba0:	d801      	bhi.n	8001ba6 <HAL_GPIO_Init+0x13a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	e001      	b.n	8001baa <HAL_GPIO_Init+0x13e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	@ 0xff
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_GPIO_Init+0x14c>
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x152>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	3b08      	subs	r3, #8
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a9 	beq.w	8001d3e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bec:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	@ (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c04:	4a45      	ldr	r2, [pc, #276]	@ (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d20 <HAL_GPIO_Init+0x2b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3c      	ldr	r2, [pc, #240]	@ (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1dc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d28 <HAL_GPIO_Init+0x2bc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1d8>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e004      	b.n	8001c4e <HAL_GPIO_Init+0x1e2>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x1e2>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_GPIO_Init+0x1e2>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5e:	492f      	ldr	r1, [pc, #188]	@ (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c78:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	492b      	ldr	r1, [pc, #172]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4927      	ldr	r1, [pc, #156]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4921      	ldr	r1, [pc, #132]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	491d      	ldr	r1, [pc, #116]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4917      	ldr	r1, [pc, #92]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4913      	ldr	r1, [pc, #76]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01f      	beq.n	8001d30 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e01f      	b.n	8001d3e <HAL_GPIO_Init+0x2d2>
 8001cfe:	bf00      	nop
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10310000 	.word	0x10310000
 8001d08:	10220000 	.word	0x10220000
 8001d0c:	10210000 	.word	0x10210000
 8001d10:	10120000 	.word	0x10120000
 8001d14:	10110000 	.word	0x10110000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4909      	ldr	r1, [pc, #36]	@ (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f ae96 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	372c      	adds	r7, #44	@ 0x2c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43d9      	mvns	r1, r3
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	400b      	ands	r3, r1
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e272      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	4b92      	ldr	r3, [pc, #584]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df4:	4b8f      	ldr	r3, [pc, #572]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
 8001e00:	4b8c      	ldr	r3, [pc, #560]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b89      	ldr	r3, [pc, #548]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d168      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e24c      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x76>
 8001e30:	4b80      	ldr	r3, [pc, #512]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a7f      	ldr	r2, [pc, #508]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e02e      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b7b      	ldr	r3, [pc, #492]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b78      	ldr	r3, [pc, #480]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a77      	ldr	r2, [pc, #476]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xbc>
 8001e6a:	4b72      	ldr	r3, [pc, #456]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a71      	ldr	r2, [pc, #452]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e84:	4b6b      	ldr	r3, [pc, #428]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a67      	ldr	r2, [pc, #412]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8f2 	bl	800108c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f8ee 	bl	800108c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e200      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xe4>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f8de 	bl	800108c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f8da 	bl	800108c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	@ 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1ec      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b53      	ldr	r3, [pc, #332]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x10c>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d063      	beq.n	8001fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f02:	4b4c      	ldr	r3, [pc, #304]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f0e:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
 8001f1a:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1c0      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4939      	ldr	r1, [pc, #228]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e03a      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f893 	bl	800108c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f88f 	bl	800108c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1a1      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4927      	ldr	r1, [pc, #156]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f872 	bl	800108c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff f86e 	bl	800108c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e180      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03a      	beq.n	800204c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f852 	bl	800108c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff f84e 	bl	800108c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e160      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <HAL_RCC_OscConfig+0x26c>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 face 	bl	80025ac <RCC_Delay>
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_RCC_OscConfig+0x274>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff f838 	bl	800108c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201e:	e00f      	b.n	8002040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff f834 	bl	800108c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d908      	bls.n	8002040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e146      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	42420000 	.word	0x42420000
 800203c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b92      	ldr	r3, [pc, #584]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e9      	bne.n	8002020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a6 	beq.w	80021a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b8b      	ldr	r3, [pc, #556]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b88      	ldr	r3, [pc, #544]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a87      	ldr	r2, [pc, #540]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b85      	ldr	r3, [pc, #532]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b82      	ldr	r3, [pc, #520]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b7f      	ldr	r3, [pc, #508]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7e      	ldr	r2, [pc, #504]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe fff5 	bl	800108c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe fff1 	bl	800108c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	@ 0x64
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e103      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b75      	ldr	r3, [pc, #468]	@ (8002290 <HAL_RCC_OscConfig+0x4c8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x312>
 80020cc:	4b6f      	ldr	r3, [pc, #444]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e02d      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x334>
 80020e2:	4b6a      	ldr	r3, [pc, #424]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a69      	ldr	r2, [pc, #420]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b67      	ldr	r3, [pc, #412]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a66      	ldr	r2, [pc, #408]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	e01c      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x356>
 8002104:	4b61      	ldr	r3, [pc, #388]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a60      	ldr	r2, [pc, #384]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	4b5e      	ldr	r3, [pc, #376]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a5d      	ldr	r2, [pc, #372]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	e00b      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 800211e:	4b5b      	ldr	r3, [pc, #364]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a5a      	ldr	r2, [pc, #360]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b58      	ldr	r3, [pc, #352]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a57      	ldr	r2, [pc, #348]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe ffa5 	bl	800108c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe ffa1 	bl	800108c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0b1      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCC_OscConfig+0x37e>
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe ff8f 	bl	800108c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe ff8b 	bl	800108c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e09b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a3b      	ldr	r2, [pc, #236]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b36      	ldr	r3, [pc, #216]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d061      	beq.n	8002280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d146      	bne.n	8002252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe ff5f 	bl	800108c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe ff5b 	bl	800108c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e06d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	4b29      	ldr	r3, [pc, #164]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fa:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4921      	ldr	r1, [pc, #132]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a19      	ldr	r1, [r3, #32]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	430b      	orrs	r3, r1
 800221e:	491b      	ldr	r1, [pc, #108]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe ff2f 	bl	800108c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe ff2b 	bl	800108c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e03d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x46a>
 8002250:	e035      	b.n	80022be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCC_OscConfig+0x4cc>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe ff18 	bl	800108c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe ff14 	bl	800108c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x498>
 800227e:	e01e      	b.n	80022be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e019      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_OscConfig+0x500>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0d0      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b67      	ldr	r3, [pc, #412]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4965      	ldr	r1, [pc, #404]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a52      	ldr	r2, [pc, #328]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800234a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d040      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b41      	ldr	r3, [pc, #260]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e073      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3d      	ldr	r3, [pc, #244]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4936      	ldr	r1, [pc, #216]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fe66 	bl	800108c <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe fe62 	bl	800108c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e053      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b27      	ldr	r3, [pc, #156]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b24      	ldr	r3, [pc, #144]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4922      	ldr	r1, [pc, #136]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <HAL_RCC_ClockConfig+0x1cc>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fdc4 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	080045c4 	.word	0x080045c4
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ce:	e027      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 80024d2:	613b      	str	r3, [r7, #16]
      break;
 80024d4:	e027      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	4a17      	ldr	r2, [pc, #92]	@ (800253c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0c5b      	lsrs	r3, r3, #17
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0d      	ldr	r2, [pc, #52]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e004      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	613b      	str	r3, [r7, #16]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	693b      	ldr	r3, [r7, #16]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200
 800253c:	080045dc 	.word	0x080045dc
 8002540:	080045ec 	.word	0x080045ec
 8002544:	003d0900 	.word	0x003d0900

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b02      	ldr	r3, [pc, #8]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x10>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	080045d4 	.word	0x080045d4

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffde 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	@ (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	080045d4 	.word	0x080045d4

080025ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <RCC_Delay+0x34>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <RCC_Delay+0x38>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c8:	bf00      	nop
  }
  while (Delay --);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	60fa      	str	r2, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <RCC_Delay+0x1c>
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000000 	.word	0x20000000
 80025e4:	10624dd3 	.word	0x10624dd3

080025e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07d      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002608:	4b4f      	ldr	r3, [pc, #316]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b4c      	ldr	r3, [pc, #304]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a4b      	ldr	r2, [pc, #300]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261e:	61d3      	str	r3, [r2, #28]
 8002620:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b46      	ldr	r3, [pc, #280]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d118      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263c:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a42      	ldr	r2, [pc, #264]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002648:	f7fe fd20 	bl	800108c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	e008      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002650:	f7fe fd1c 	bl	800108c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e06d      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800266e:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02e      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d027      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268c:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002694:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002696:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800269c:	4b2c      	ldr	r3, [pc, #176]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026a2:	4a29      	ldr	r2, [pc, #164]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d014      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fceb 	bl	800108c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fce7 	bl	800108c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e036      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4917      	ldr	r1, [pc, #92]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a13      	ldr	r2, [pc, #76]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	490b      	ldr	r1, [pc, #44]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4904      	ldr	r1, [pc, #16]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
 8002750:	42420440 	.word	0x42420440

08002754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e041      	b.n	80027ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fb16 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 fa56 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d001      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e035      	b.n	8002878 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a16      	ldr	r2, [pc, #88]	@ (8002884 <HAL_TIM_Base_Start_IT+0x90>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x4e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002836:	d004      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x4e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <HAL_TIM_Base_Start_IT+0x94>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d111      	bne.n	8002866 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d010      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	e007      	b.n	8002876 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400

0800288c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d020      	beq.n	80028f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01b      	beq.n	80028f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0202 	mvn.w	r2, #2
 80028c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f998 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 80028dc:	e005      	b.n	80028ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f98b 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f99a 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d020      	beq.n	800293c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01b      	beq.n	800293c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0204 	mvn.w	r2, #4
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f972 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f965 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f974 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d020      	beq.n	8002988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0208 	mvn.w	r2, #8
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2204      	movs	r2, #4
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f94c 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f93f 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f94e 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d020      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0210 	mvn.w	r2, #16
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2208      	movs	r2, #8
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f926 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f919 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f928 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0201 	mvn.w	r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f906 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa6f 	bl	8002efa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8f8 	bl	8002c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0220 	mvn.w	r2, #32
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa42 	bl	8002ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIM_ConfigClockSource+0x1c>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0b4      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x186>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac0:	d03e      	beq.n	8002b40 <HAL_TIM_ConfigClockSource+0xd4>
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac6:	f200 8087 	bhi.w	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ace:	f000 8086 	beq.w	8002bde <HAL_TIM_ConfigClockSource+0x172>
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad6:	d87f      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b70      	cmp	r3, #112	@ 0x70
 8002ada:	d01a      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xa6>
 8002adc:	2b70      	cmp	r3, #112	@ 0x70
 8002ade:	d87b      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b60      	cmp	r3, #96	@ 0x60
 8002ae2:	d050      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ae4:	2b60      	cmp	r3, #96	@ 0x60
 8002ae6:	d877      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b50      	cmp	r3, #80	@ 0x50
 8002aea:	d03c      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xfa>
 8002aec:	2b50      	cmp	r3, #80	@ 0x50
 8002aee:	d873      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b40      	cmp	r3, #64	@ 0x40
 8002af2:	d058      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x13a>
 8002af4:	2b40      	cmp	r3, #64	@ 0x40
 8002af6:	d86f      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b30      	cmp	r3, #48	@ 0x30
 8002afa:	d064      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002afc:	2b30      	cmp	r3, #48	@ 0x30
 8002afe:	d86b      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d060      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d867      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d05c      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d05a      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b10:	e062      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b22:	f000 f96a 	bl	8002dfa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	609a      	str	r2, [r3, #8]
      break;
 8002b3e:	e04f      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b50:	f000 f953 	bl	8002dfa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b62:	609a      	str	r2, [r3, #8]
      break;
 8002b64:	e03c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 f8ca 	bl	8002d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2150      	movs	r1, #80	@ 0x50
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f921 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002b84:	e02c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 f8e8 	bl	8002d68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2160      	movs	r1, #96	@ 0x60
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f911 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e01c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 f8aa 	bl	8002d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2140      	movs	r1, #64	@ 0x40
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f901 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e00c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f000 f8f8 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002bd6:	e003      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e000      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	@ (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_Base_SetConfig+0x28>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0x28>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a28      	ldr	r2, [pc, #160]	@ (8002d08 <TIM_Base_SetConfig+0xc4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d108      	bne.n	8002c7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8c:	d003      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <TIM_Base_SetConfig+0xc4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d108      	bne.n	8002ca8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d103      	bne.n	8002cdc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	611a      	str	r2, [r3, #16]
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40000400 	.word	0x40000400

08002d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f023 0201 	bic.w	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f023 030a 	bic.w	r3, r3, #10
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0210 	bic.w	r2, r3, #16
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	031b      	lsls	r3, r3, #12
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002da4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	621a      	str	r2, [r3, #32]
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f043 0307 	orr.w	r3, r3, #7
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	021a      	lsls	r2, r3, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e041      	b.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9c:	d004      	beq.n	8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a10      	ldr	r2, [pc, #64]	@ (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400

08002ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e042      	b.n	8002fa4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd ff5e 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fdb7 	bl	8003ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	@ 0x28
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d175      	bne.n	80030b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_UART_Transmit+0x2c>
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e06e      	b.n	80030ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2221      	movs	r2, #33	@ 0x21
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fea:	f7fe f84f 	bl	800108c <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003004:	d108      	bne.n	8003018 <HAL_UART_Transmit+0x6c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	e003      	b.n	8003020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003020:	e02e      	b.n	8003080 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	2180      	movs	r1, #128	@ 0x80
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fb1c 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e03a      	b.n	80030ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	3302      	adds	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e007      	b.n	8003072 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	3301      	adds	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1cb      	bne.n	8003022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	2140      	movs	r1, #64	@ 0x40
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fae8 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e006      	b.n	80030ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	4613      	mov	r3, r2
 80030ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d112      	bne.n	8003102 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_UART_Receive_IT+0x26>
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e00b      	b.n	8003104 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fb0f 	bl	800371c <UART_Start_Receive_IT>
 80030fe:	4603      	mov	r3, r0
 8003100:	e000      	b.n	8003104 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b0ba      	sub	sp, #232	@ 0xe8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800314a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_UART_IRQHandler+0x66>
 800315e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fbec 	bl	8003948 <UART_Receive_IT>
      return;
 8003170:	e25b      	b.n	800362a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80de 	beq.w	8003338 <HAL_UART_IRQHandler+0x22c>
 800317c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800318c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80d1 	beq.w	8003338 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_UART_IRQHandler+0xae>
 80031a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_UART_IRQHandler+0xd2>
 80031c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_UART_IRQHandler+0xf6>
 80031ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f043 0204 	orr.w	r2, r3, #4
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d011      	beq.n	8003232 <HAL_UART_IRQHandler+0x126>
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800321a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f043 0208 	orr.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 81f2 	beq.w	8003620 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800323c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_UART_IRQHandler+0x14e>
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fb77 	bl	8003948 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_UART_IRQHandler+0x17a>
 800327e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04f      	beq.n	8003326 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa81 	bl	800378e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d041      	beq.n	800331e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3314      	adds	r3, #20
 80032c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1d9      	bne.n	800329a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d013      	beq.n	8003316 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	4a7e      	ldr	r2, [pc, #504]	@ (80034ec <HAL_UART_IRQHandler+0x3e0>)
 80032f4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fb3e 	bl	800197c <HAL_DMA_Abort_IT>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003310:	4610      	mov	r0, r2
 8003312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	e00e      	b.n	8003334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f993 	bl	8003642 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e00a      	b.n	8003334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f98f 	bl	8003642 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e006      	b.n	8003334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f98b 	bl	8003642 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003332:	e175      	b.n	8003620 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	bf00      	nop
    return;
 8003336:	e173      	b.n	8003620 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 814f 	bne.w	80035e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8148 	beq.w	80035e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8141 	beq.w	80035e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80b6 	beq.w	80034f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8145 	beq.w	8003624 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800339e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033a2:	429a      	cmp	r2, r3
 80033a4:	f080 813e 	bcs.w	8003624 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	f000 8088 	beq.w	80034cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1d9      	bne.n	80033bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3314      	adds	r3, #20
 800340e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800342c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003430:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003434:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800343e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e1      	bne.n	8003408 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3314      	adds	r3, #20
 800344a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800345a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003468:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800346a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800346e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e3      	bne.n	8003444 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800349a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800349c:	f023 0310 	bic.w	r3, r3, #16
 80034a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e3      	bne.n	800348a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fa1d 	bl	8001906 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8b6 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034e8:	e09c      	b.n	8003624 <HAL_UART_IRQHandler+0x518>
 80034ea:	bf00      	nop
 80034ec:	08003853 	.word	0x08003853
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 808e 	beq.w	8003628 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800350c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8089 	beq.w	8003628 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800353a:	647a      	str	r2, [r7, #68]	@ 0x44
 800353c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e3      	bne.n	8003516 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3314      	adds	r3, #20
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	623b      	str	r3, [r7, #32]
   return(result);
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3314      	adds	r3, #20
 800356e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003572:	633a      	str	r2, [r7, #48]	@ 0x30
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e3      	bne.n	800354e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0310 	bic.w	r3, r3, #16
 80035aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035b8:	61fa      	str	r2, [r7, #28]
 80035ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	617b      	str	r3, [r7, #20]
   return(result);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e3      	bne.n	8003594 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f83b 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035de:	e023      	b.n	8003628 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_UART_IRQHandler+0x4f4>
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f93e 	bl	800387a <UART_Transmit_IT>
    return;
 80035fe:	e014      	b.n	800362a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <HAL_UART_IRQHandler+0x51e>
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f97d 	bl	8003918 <UART_EndTransmit_IT>
    return;
 800361e:	e004      	b.n	800362a <HAL_UART_IRQHandler+0x51e>
    return;
 8003620:	bf00      	nop
 8003622:	e002      	b.n	800362a <HAL_UART_IRQHandler+0x51e>
      return;
 8003624:	bf00      	nop
 8003626:	e000      	b.n	800362a <HAL_UART_IRQHandler+0x51e>
      return;
 8003628:	bf00      	nop
  }
}
 800362a:	37e8      	adds	r7, #232	@ 0xe8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr

0800366a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367a:	e03b      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d037      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fd fd02 	bl	800108c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	6a3a      	ldr	r2, [r7, #32]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <UART_WaitOnFlagUntilTimeout+0x30>
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e03a      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b80      	cmp	r3, #128	@ 0x80
 80036b0:	d020      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d01d      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d116      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f856 	bl	800378e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2208      	movs	r2, #8
 80036e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e00f      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	429a      	cmp	r2, r3
 8003710:	d0b4      	beq.n	800367c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2222      	movs	r2, #34	@ 0x22
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003760:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800378e:	b480      	push	{r7}
 8003790:	b095      	sub	sp, #84	@ 0x54
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80037b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e5      	bne.n	80037ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	2b01      	cmp	r3, #1
 8003804:	d119      	bne.n	800383a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	60bb      	str	r3, [r7, #8]
   return(result);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f023 0310 	bic.w	r3, r3, #16
 800381c:	647b      	str	r3, [r7, #68]	@ 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003826:	61ba      	str	r2, [r7, #24]
 8003828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	613b      	str	r3, [r7, #16]
   return(result);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e5      	bne.n	8003806 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003848:	bf00      	nop
 800384a:	3754      	adds	r7, #84	@ 0x54
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fee8 	bl	8003642 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b21      	cmp	r3, #33	@ 0x21
 800388c:	d13e      	bne.n	800390c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003896:	d114      	bne.n	80038c2 <UART_Transmit_IT+0x48>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d110      	bne.n	80038c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	1c9a      	adds	r2, r3, #2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]
 80038c0:	e008      	b.n	80038d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6211      	str	r1, [r2, #32]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4619      	mov	r1, r3
 80038e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003906:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800392e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fe79 	bl	8003630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b22      	cmp	r3, #34	@ 0x22
 800395a:	f040 80ae 	bne.w	8003aba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003966:	d117      	bne.n	8003998 <UART_Receive_IT+0x50>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b29b      	uxth	r3, r3
 8003982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003986:	b29a      	uxth	r2, r3
 8003988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28
 8003996:	e026      	b.n	80039e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	d007      	beq.n	80039bc <UART_Receive_IT+0x74>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <UART_Receive_IT+0x82>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e008      	b.n	80039dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4619      	mov	r1, r3
 80039f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d15d      	bne.n	8003ab6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0220 	bic.w	r2, r2, #32
 8003a08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d135      	bne.n	8003aac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	623a      	str	r2, [r7, #32]
 8003a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	69f9      	ldr	r1, [r7, #28]
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d10a      	bne.n	8003a9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fdd5 	bl	8003654 <HAL_UARTEx_RxEventCallback>
 8003aaa:	e002      	b.n	8003ab2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fc fee9 	bl	8000884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e002      	b.n	8003abc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3730      	adds	r7, #48	@ 0x30
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003afe:	f023 030c 	bic.w	r3, r3, #12
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd8 <UART_SetConfig+0x114>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d103      	bne.n	8003b34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b2c:	f7fe fd2a 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	e002      	b.n	8003b3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7fe fd12 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8003b38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009a      	lsls	r2, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	4a22      	ldr	r2, [pc, #136]	@ (8003bdc <UART_SetConfig+0x118>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	0119      	lsls	r1, r3, #4
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b70:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <UART_SetConfig+0x118>)
 8003b72:	fba3 0302 	umull	r0, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2064      	movs	r0, #100	@ 0x64
 8003b7a:	fb00 f303 	mul.w	r3, r0, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	3332      	adds	r3, #50	@ 0x32
 8003b84:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <UART_SetConfig+0x118>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b90:	4419      	add	r1, r3
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009a      	lsls	r2, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <UART_SetConfig+0x118>)
 8003baa:	fba3 0302 	umull	r0, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2064      	movs	r0, #100	@ 0x64
 8003bb2:	fb00 f303 	mul.w	r3, r0, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	3332      	adds	r3, #50	@ 0x32
 8003bbc:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <UART_SetConfig+0x118>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	440a      	add	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	51eb851f 	.word	0x51eb851f

08003be0 <sniprintf>:
 8003be0:	b40c      	push	{r2, r3}
 8003be2:	b530      	push	{r4, r5, lr}
 8003be4:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <sniprintf+0x64>)
 8003be6:	1e0c      	subs	r4, r1, #0
 8003be8:	681d      	ldr	r5, [r3, #0]
 8003bea:	b09d      	sub	sp, #116	@ 0x74
 8003bec:	da08      	bge.n	8003c00 <sniprintf+0x20>
 8003bee:	238b      	movs	r3, #139	@ 0x8b
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	602b      	str	r3, [r5, #0]
 8003bf6:	b01d      	add	sp, #116	@ 0x74
 8003bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bfc:	b002      	add	sp, #8
 8003bfe:	4770      	bx	lr
 8003c00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003c04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c08:	bf0c      	ite	eq
 8003c0a:	4623      	moveq	r3, r4
 8003c0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	9307      	str	r3, [sp, #28]
 8003c14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c18:	9002      	str	r0, [sp, #8]
 8003c1a:	9006      	str	r0, [sp, #24]
 8003c1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c20:	4628      	mov	r0, r5
 8003c22:	ab21      	add	r3, sp, #132	@ 0x84
 8003c24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003c26:	a902      	add	r1, sp, #8
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f000 f9a5 	bl	8003f78 <_svfiprintf_r>
 8003c2e:	1c43      	adds	r3, r0, #1
 8003c30:	bfbc      	itt	lt
 8003c32:	238b      	movlt	r3, #139	@ 0x8b
 8003c34:	602b      	strlt	r3, [r5, #0]
 8003c36:	2c00      	cmp	r4, #0
 8003c38:	d0dd      	beq.n	8003bf6 <sniprintf+0x16>
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	9b02      	ldr	r3, [sp, #8]
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e7d9      	b.n	8003bf6 <sniprintf+0x16>
 8003c42:	bf00      	nop
 8003c44:	2000000c 	.word	0x2000000c

08003c48 <memset>:
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4402      	add	r2, r0
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <memset+0xa>
 8003c50:	4770      	bx	lr
 8003c52:	f803 1b01 	strb.w	r1, [r3], #1
 8003c56:	e7f9      	b.n	8003c4c <memset+0x4>

08003c58 <strncmp>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	b16a      	cbz	r2, 8003c78 <strncmp+0x20>
 8003c5c:	3901      	subs	r1, #1
 8003c5e:	1884      	adds	r4, r0, r2
 8003c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d103      	bne.n	8003c74 <strncmp+0x1c>
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d001      	beq.n	8003c74 <strncmp+0x1c>
 8003c70:	2a00      	cmp	r2, #0
 8003c72:	d1f5      	bne.n	8003c60 <strncmp+0x8>
 8003c74:	1ad0      	subs	r0, r2, r3
 8003c76:	bd10      	pop	{r4, pc}
 8003c78:	4610      	mov	r0, r2
 8003c7a:	e7fc      	b.n	8003c76 <strncmp+0x1e>

08003c7c <__errno>:
 8003c7c:	4b01      	ldr	r3, [pc, #4]	@ (8003c84 <__errno+0x8>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c

08003c88 <__libc_init_array>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	4d0c      	ldr	r5, [pc, #48]	@ (8003cc0 <__libc_init_array+0x38>)
 8003c8e:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc4 <__libc_init_array+0x3c>)
 8003c90:	1b64      	subs	r4, r4, r5
 8003c92:	10a4      	asrs	r4, r4, #2
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	d109      	bne.n	8003cac <__libc_init_array+0x24>
 8003c98:	f000 fc78 	bl	800458c <_init>
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	4d0a      	ldr	r5, [pc, #40]	@ (8003cc8 <__libc_init_array+0x40>)
 8003ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ccc <__libc_init_array+0x44>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	42a6      	cmp	r6, r4
 8003ca8:	d105      	bne.n	8003cb6 <__libc_init_array+0x2e>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb0:	4798      	blx	r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7ee      	b.n	8003c94 <__libc_init_array+0xc>
 8003cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cba:	4798      	blx	r3
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	e7f2      	b.n	8003ca6 <__libc_init_array+0x1e>
 8003cc0:	0800462c 	.word	0x0800462c
 8003cc4:	0800462c 	.word	0x0800462c
 8003cc8:	0800462c 	.word	0x0800462c
 8003ccc:	08004630 	.word	0x08004630

08003cd0 <__retarget_lock_acquire_recursive>:
 8003cd0:	4770      	bx	lr

08003cd2 <__retarget_lock_release_recursive>:
 8003cd2:	4770      	bx	lr

08003cd4 <_free_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	d040      	beq.n	8003d5e <_free_r+0x8a>
 8003cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce0:	1f0c      	subs	r4, r1, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bfb8      	it	lt
 8003ce6:	18e4      	addlt	r4, r4, r3
 8003ce8:	f000 f8de 	bl	8003ea8 <__malloc_lock>
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <_free_r+0x8c>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	b933      	cbnz	r3, 8003d00 <_free_r+0x2c>
 8003cf2:	6063      	str	r3, [r4, #4]
 8003cf4:	6014      	str	r4, [r2, #0]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cfc:	f000 b8da 	b.w	8003eb4 <__malloc_unlock>
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d908      	bls.n	8003d16 <_free_r+0x42>
 8003d04:	6820      	ldr	r0, [r4, #0]
 8003d06:	1821      	adds	r1, r4, r0
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	bf01      	itttt	eq
 8003d0c:	6819      	ldreq	r1, [r3, #0]
 8003d0e:	685b      	ldreq	r3, [r3, #4]
 8003d10:	1809      	addeq	r1, r1, r0
 8003d12:	6021      	streq	r1, [r4, #0]
 8003d14:	e7ed      	b.n	8003cf2 <_free_r+0x1e>
 8003d16:	461a      	mov	r2, r3
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b10b      	cbz	r3, 8003d20 <_free_r+0x4c>
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	d9fa      	bls.n	8003d16 <_free_r+0x42>
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	1850      	adds	r0, r2, r1
 8003d24:	42a0      	cmp	r0, r4
 8003d26:	d10b      	bne.n	8003d40 <_free_r+0x6c>
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	4401      	add	r1, r0
 8003d2c:	1850      	adds	r0, r2, r1
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	d1e0      	bne.n	8003cf6 <_free_r+0x22>
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4408      	add	r0, r1
 8003d3a:	6010      	str	r0, [r2, #0]
 8003d3c:	6053      	str	r3, [r2, #4]
 8003d3e:	e7da      	b.n	8003cf6 <_free_r+0x22>
 8003d40:	d902      	bls.n	8003d48 <_free_r+0x74>
 8003d42:	230c      	movs	r3, #12
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	e7d6      	b.n	8003cf6 <_free_r+0x22>
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	1821      	adds	r1, r4, r0
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	bf01      	itttt	eq
 8003d50:	6819      	ldreq	r1, [r3, #0]
 8003d52:	685b      	ldreq	r3, [r3, #4]
 8003d54:	1809      	addeq	r1, r1, r0
 8003d56:	6021      	streq	r1, [r4, #0]
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	6054      	str	r4, [r2, #4]
 8003d5c:	e7cb      	b.n	8003cf6 <_free_r+0x22>
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20000300 	.word	0x20000300

08003d64 <sbrk_aligned>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	4e0f      	ldr	r6, [pc, #60]	@ (8003da4 <sbrk_aligned+0x40>)
 8003d68:	460c      	mov	r4, r1
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b911      	cbnz	r1, 8003d76 <sbrk_aligned+0x12>
 8003d70:	f000 fbaa 	bl	80044c8 <_sbrk_r>
 8003d74:	6030      	str	r0, [r6, #0]
 8003d76:	4621      	mov	r1, r4
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 fba5 	bl	80044c8 <_sbrk_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	d103      	bne.n	8003d8a <sbrk_aligned+0x26>
 8003d82:	f04f 34ff 	mov.w	r4, #4294967295
 8003d86:	4620      	mov	r0, r4
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	1cc4      	adds	r4, r0, #3
 8003d8c:	f024 0403 	bic.w	r4, r4, #3
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d0f8      	beq.n	8003d86 <sbrk_aligned+0x22>
 8003d94:	1a21      	subs	r1, r4, r0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 fb96 	bl	80044c8 <_sbrk_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d1f2      	bne.n	8003d86 <sbrk_aligned+0x22>
 8003da0:	e7ef      	b.n	8003d82 <sbrk_aligned+0x1e>
 8003da2:	bf00      	nop
 8003da4:	200002fc 	.word	0x200002fc

08003da8 <_malloc_r>:
 8003da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dac:	1ccd      	adds	r5, r1, #3
 8003dae:	f025 0503 	bic.w	r5, r5, #3
 8003db2:	3508      	adds	r5, #8
 8003db4:	2d0c      	cmp	r5, #12
 8003db6:	bf38      	it	cc
 8003db8:	250c      	movcc	r5, #12
 8003dba:	2d00      	cmp	r5, #0
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	db01      	blt.n	8003dc4 <_malloc_r+0x1c>
 8003dc0:	42a9      	cmp	r1, r5
 8003dc2:	d904      	bls.n	8003dce <_malloc_r+0x26>
 8003dc4:	230c      	movs	r3, #12
 8003dc6:	6033      	str	r3, [r6, #0]
 8003dc8:	2000      	movs	r0, #0
 8003dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ea4 <_malloc_r+0xfc>
 8003dd2:	f000 f869 	bl	8003ea8 <__malloc_lock>
 8003dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dda:	461c      	mov	r4, r3
 8003ddc:	bb44      	cbnz	r4, 8003e30 <_malloc_r+0x88>
 8003dde:	4629      	mov	r1, r5
 8003de0:	4630      	mov	r0, r6
 8003de2:	f7ff ffbf 	bl	8003d64 <sbrk_aligned>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	4604      	mov	r4, r0
 8003dea:	d158      	bne.n	8003e9e <_malloc_r+0xf6>
 8003dec:	f8d8 4000 	ldr.w	r4, [r8]
 8003df0:	4627      	mov	r7, r4
 8003df2:	2f00      	cmp	r7, #0
 8003df4:	d143      	bne.n	8003e7e <_malloc_r+0xd6>
 8003df6:	2c00      	cmp	r4, #0
 8003df8:	d04b      	beq.n	8003e92 <_malloc_r+0xea>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	4630      	mov	r0, r6
 8003e00:	eb04 0903 	add.w	r9, r4, r3
 8003e04:	f000 fb60 	bl	80044c8 <_sbrk_r>
 8003e08:	4581      	cmp	r9, r0
 8003e0a:	d142      	bne.n	8003e92 <_malloc_r+0xea>
 8003e0c:	6821      	ldr	r1, [r4, #0]
 8003e0e:	4630      	mov	r0, r6
 8003e10:	1a6d      	subs	r5, r5, r1
 8003e12:	4629      	mov	r1, r5
 8003e14:	f7ff ffa6 	bl	8003d64 <sbrk_aligned>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d03a      	beq.n	8003e92 <_malloc_r+0xea>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	442b      	add	r3, r5
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	f8d8 3000 	ldr.w	r3, [r8]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	bb62      	cbnz	r2, 8003e84 <_malloc_r+0xdc>
 8003e2a:	f8c8 7000 	str.w	r7, [r8]
 8003e2e:	e00f      	b.n	8003e50 <_malloc_r+0xa8>
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	1b52      	subs	r2, r2, r5
 8003e34:	d420      	bmi.n	8003e78 <_malloc_r+0xd0>
 8003e36:	2a0b      	cmp	r2, #11
 8003e38:	d917      	bls.n	8003e6a <_malloc_r+0xc2>
 8003e3a:	1961      	adds	r1, r4, r5
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	6025      	str	r5, [r4, #0]
 8003e40:	bf18      	it	ne
 8003e42:	6059      	strne	r1, [r3, #4]
 8003e44:	6863      	ldr	r3, [r4, #4]
 8003e46:	bf08      	it	eq
 8003e48:	f8c8 1000 	streq.w	r1, [r8]
 8003e4c:	5162      	str	r2, [r4, r5]
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	4630      	mov	r0, r6
 8003e52:	f000 f82f 	bl	8003eb4 <__malloc_unlock>
 8003e56:	f104 000b 	add.w	r0, r4, #11
 8003e5a:	1d23      	adds	r3, r4, #4
 8003e5c:	f020 0007 	bic.w	r0, r0, #7
 8003e60:	1ac2      	subs	r2, r0, r3
 8003e62:	bf1c      	itt	ne
 8003e64:	1a1b      	subne	r3, r3, r0
 8003e66:	50a3      	strne	r3, [r4, r2]
 8003e68:	e7af      	b.n	8003dca <_malloc_r+0x22>
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	bf0c      	ite	eq
 8003e70:	f8c8 2000 	streq.w	r2, [r8]
 8003e74:	605a      	strne	r2, [r3, #4]
 8003e76:	e7eb      	b.n	8003e50 <_malloc_r+0xa8>
 8003e78:	4623      	mov	r3, r4
 8003e7a:	6864      	ldr	r4, [r4, #4]
 8003e7c:	e7ae      	b.n	8003ddc <_malloc_r+0x34>
 8003e7e:	463c      	mov	r4, r7
 8003e80:	687f      	ldr	r7, [r7, #4]
 8003e82:	e7b6      	b.n	8003df2 <_malloc_r+0x4a>
 8003e84:	461a      	mov	r2, r3
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d1fb      	bne.n	8003e84 <_malloc_r+0xdc>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6053      	str	r3, [r2, #4]
 8003e90:	e7de      	b.n	8003e50 <_malloc_r+0xa8>
 8003e92:	230c      	movs	r3, #12
 8003e94:	4630      	mov	r0, r6
 8003e96:	6033      	str	r3, [r6, #0]
 8003e98:	f000 f80c 	bl	8003eb4 <__malloc_unlock>
 8003e9c:	e794      	b.n	8003dc8 <_malloc_r+0x20>
 8003e9e:	6005      	str	r5, [r0, #0]
 8003ea0:	e7d6      	b.n	8003e50 <_malloc_r+0xa8>
 8003ea2:	bf00      	nop
 8003ea4:	20000300 	.word	0x20000300

08003ea8 <__malloc_lock>:
 8003ea8:	4801      	ldr	r0, [pc, #4]	@ (8003eb0 <__malloc_lock+0x8>)
 8003eaa:	f7ff bf11 	b.w	8003cd0 <__retarget_lock_acquire_recursive>
 8003eae:	bf00      	nop
 8003eb0:	200002f8 	.word	0x200002f8

08003eb4 <__malloc_unlock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	@ (8003ebc <__malloc_unlock+0x8>)
 8003eb6:	f7ff bf0c 	b.w	8003cd2 <__retarget_lock_release_recursive>
 8003eba:	bf00      	nop
 8003ebc:	200002f8 	.word	0x200002f8

08003ec0 <__ssputs_r>:
 8003ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec4:	461f      	mov	r7, r3
 8003ec6:	688e      	ldr	r6, [r1, #8]
 8003ec8:	4682      	mov	sl, r0
 8003eca:	42be      	cmp	r6, r7
 8003ecc:	460c      	mov	r4, r1
 8003ece:	4690      	mov	r8, r2
 8003ed0:	680b      	ldr	r3, [r1, #0]
 8003ed2:	d82d      	bhi.n	8003f30 <__ssputs_r+0x70>
 8003ed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ed8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003edc:	d026      	beq.n	8003f2c <__ssputs_r+0x6c>
 8003ede:	6965      	ldr	r5, [r4, #20]
 8003ee0:	6909      	ldr	r1, [r1, #16]
 8003ee2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ee6:	eba3 0901 	sub.w	r9, r3, r1
 8003eea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eee:	1c7b      	adds	r3, r7, #1
 8003ef0:	444b      	add	r3, r9
 8003ef2:	106d      	asrs	r5, r5, #1
 8003ef4:	429d      	cmp	r5, r3
 8003ef6:	bf38      	it	cc
 8003ef8:	461d      	movcc	r5, r3
 8003efa:	0553      	lsls	r3, r2, #21
 8003efc:	d527      	bpl.n	8003f4e <__ssputs_r+0x8e>
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7ff ff52 	bl	8003da8 <_malloc_r>
 8003f04:	4606      	mov	r6, r0
 8003f06:	b360      	cbz	r0, 8003f62 <__ssputs_r+0xa2>
 8003f08:	464a      	mov	r2, r9
 8003f0a:	6921      	ldr	r1, [r4, #16]
 8003f0c:	f000 fafa 	bl	8004504 <memcpy>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	6126      	str	r6, [r4, #16]
 8003f1e:	444e      	add	r6, r9
 8003f20:	6026      	str	r6, [r4, #0]
 8003f22:	463e      	mov	r6, r7
 8003f24:	6165      	str	r5, [r4, #20]
 8003f26:	eba5 0509 	sub.w	r5, r5, r9
 8003f2a:	60a5      	str	r5, [r4, #8]
 8003f2c:	42be      	cmp	r6, r7
 8003f2e:	d900      	bls.n	8003f32 <__ssputs_r+0x72>
 8003f30:	463e      	mov	r6, r7
 8003f32:	4632      	mov	r2, r6
 8003f34:	4641      	mov	r1, r8
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	f000 faac 	bl	8004494 <memmove>
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	1b9b      	subs	r3, r3, r6
 8003f42:	60a3      	str	r3, [r4, #8]
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	4433      	add	r3, r6
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4e:	462a      	mov	r2, r5
 8003f50:	f000 fae6 	bl	8004520 <_realloc_r>
 8003f54:	4606      	mov	r6, r0
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d1e0      	bne.n	8003f1c <__ssputs_r+0x5c>
 8003f5a:	4650      	mov	r0, sl
 8003f5c:	6921      	ldr	r1, [r4, #16]
 8003f5e:	f7ff feb9 	bl	8003cd4 <_free_r>
 8003f62:	230c      	movs	r3, #12
 8003f64:	f8ca 3000 	str.w	r3, [sl]
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	e7e9      	b.n	8003f4a <__ssputs_r+0x8a>
	...

08003f78 <_svfiprintf_r>:
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	4698      	mov	r8, r3
 8003f7e:	898b      	ldrh	r3, [r1, #12]
 8003f80:	4607      	mov	r7, r0
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	460d      	mov	r5, r1
 8003f86:	4614      	mov	r4, r2
 8003f88:	b09d      	sub	sp, #116	@ 0x74
 8003f8a:	d510      	bpl.n	8003fae <_svfiprintf_r+0x36>
 8003f8c:	690b      	ldr	r3, [r1, #16]
 8003f8e:	b973      	cbnz	r3, 8003fae <_svfiprintf_r+0x36>
 8003f90:	2140      	movs	r1, #64	@ 0x40
 8003f92:	f7ff ff09 	bl	8003da8 <_malloc_r>
 8003f96:	6028      	str	r0, [r5, #0]
 8003f98:	6128      	str	r0, [r5, #16]
 8003f9a:	b930      	cbnz	r0, 8003faa <_svfiprintf_r+0x32>
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	b01d      	add	sp, #116	@ 0x74
 8003fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003faa:	2340      	movs	r3, #64	@ 0x40
 8003fac:	616b      	str	r3, [r5, #20]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fb8:	2330      	movs	r3, #48	@ 0x30
 8003fba:	f04f 0901 	mov.w	r9, #1
 8003fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800415c <_svfiprintf_r+0x1e4>
 8003fc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fca:	4623      	mov	r3, r4
 8003fcc:	469a      	mov	sl, r3
 8003fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd2:	b10a      	cbz	r2, 8003fd8 <_svfiprintf_r+0x60>
 8003fd4:	2a25      	cmp	r2, #37	@ 0x25
 8003fd6:	d1f9      	bne.n	8003fcc <_svfiprintf_r+0x54>
 8003fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8003fdc:	d00b      	beq.n	8003ff6 <_svfiprintf_r+0x7e>
 8003fde:	465b      	mov	r3, fp
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f7ff ff6b 	bl	8003ec0 <__ssputs_r>
 8003fea:	3001      	adds	r0, #1
 8003fec:	f000 80a7 	beq.w	800413e <_svfiprintf_r+0x1c6>
 8003ff0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ff2:	445a      	add	r2, fp
 8003ff4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 809f 	beq.w	800413e <_svfiprintf_r+0x1c6>
 8004000:	2300      	movs	r3, #0
 8004002:	f04f 32ff 	mov.w	r2, #4294967295
 8004006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400a:	f10a 0a01 	add.w	sl, sl, #1
 800400e:	9304      	str	r3, [sp, #16]
 8004010:	9307      	str	r3, [sp, #28]
 8004012:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004016:	931a      	str	r3, [sp, #104]	@ 0x68
 8004018:	4654      	mov	r4, sl
 800401a:	2205      	movs	r2, #5
 800401c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004020:	484e      	ldr	r0, [pc, #312]	@ (800415c <_svfiprintf_r+0x1e4>)
 8004022:	f000 fa61 	bl	80044e8 <memchr>
 8004026:	9a04      	ldr	r2, [sp, #16]
 8004028:	b9d8      	cbnz	r0, 8004062 <_svfiprintf_r+0xea>
 800402a:	06d0      	lsls	r0, r2, #27
 800402c:	bf44      	itt	mi
 800402e:	2320      	movmi	r3, #32
 8004030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004034:	0711      	lsls	r1, r2, #28
 8004036:	bf44      	itt	mi
 8004038:	232b      	movmi	r3, #43	@ 0x2b
 800403a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800403e:	f89a 3000 	ldrb.w	r3, [sl]
 8004042:	2b2a      	cmp	r3, #42	@ 0x2a
 8004044:	d015      	beq.n	8004072 <_svfiprintf_r+0xfa>
 8004046:	4654      	mov	r4, sl
 8004048:	2000      	movs	r0, #0
 800404a:	f04f 0c0a 	mov.w	ip, #10
 800404e:	9a07      	ldr	r2, [sp, #28]
 8004050:	4621      	mov	r1, r4
 8004052:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004056:	3b30      	subs	r3, #48	@ 0x30
 8004058:	2b09      	cmp	r3, #9
 800405a:	d94b      	bls.n	80040f4 <_svfiprintf_r+0x17c>
 800405c:	b1b0      	cbz	r0, 800408c <_svfiprintf_r+0x114>
 800405e:	9207      	str	r2, [sp, #28]
 8004060:	e014      	b.n	800408c <_svfiprintf_r+0x114>
 8004062:	eba0 0308 	sub.w	r3, r0, r8
 8004066:	fa09 f303 	lsl.w	r3, r9, r3
 800406a:	4313      	orrs	r3, r2
 800406c:	46a2      	mov	sl, r4
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	e7d2      	b.n	8004018 <_svfiprintf_r+0xa0>
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	1d19      	adds	r1, r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	9103      	str	r1, [sp, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	bfbb      	ittet	lt
 800407e:	425b      	neglt	r3, r3
 8004080:	f042 0202 	orrlt.w	r2, r2, #2
 8004084:	9307      	strge	r3, [sp, #28]
 8004086:	9307      	strlt	r3, [sp, #28]
 8004088:	bfb8      	it	lt
 800408a:	9204      	strlt	r2, [sp, #16]
 800408c:	7823      	ldrb	r3, [r4, #0]
 800408e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004090:	d10a      	bne.n	80040a8 <_svfiprintf_r+0x130>
 8004092:	7863      	ldrb	r3, [r4, #1]
 8004094:	2b2a      	cmp	r3, #42	@ 0x2a
 8004096:	d132      	bne.n	80040fe <_svfiprintf_r+0x186>
 8004098:	9b03      	ldr	r3, [sp, #12]
 800409a:	3402      	adds	r4, #2
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	9203      	str	r2, [sp, #12]
 80040a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040a6:	9305      	str	r3, [sp, #20]
 80040a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004160 <_svfiprintf_r+0x1e8>
 80040ac:	2203      	movs	r2, #3
 80040ae:	4650      	mov	r0, sl
 80040b0:	7821      	ldrb	r1, [r4, #0]
 80040b2:	f000 fa19 	bl	80044e8 <memchr>
 80040b6:	b138      	cbz	r0, 80040c8 <_svfiprintf_r+0x150>
 80040b8:	2240      	movs	r2, #64	@ 0x40
 80040ba:	9b04      	ldr	r3, [sp, #16]
 80040bc:	eba0 000a 	sub.w	r0, r0, sl
 80040c0:	4082      	lsls	r2, r0
 80040c2:	4313      	orrs	r3, r2
 80040c4:	3401      	adds	r4, #1
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040cc:	2206      	movs	r2, #6
 80040ce:	4825      	ldr	r0, [pc, #148]	@ (8004164 <_svfiprintf_r+0x1ec>)
 80040d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040d4:	f000 fa08 	bl	80044e8 <memchr>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d036      	beq.n	800414a <_svfiprintf_r+0x1d2>
 80040dc:	4b22      	ldr	r3, [pc, #136]	@ (8004168 <_svfiprintf_r+0x1f0>)
 80040de:	bb1b      	cbnz	r3, 8004128 <_svfiprintf_r+0x1b0>
 80040e0:	9b03      	ldr	r3, [sp, #12]
 80040e2:	3307      	adds	r3, #7
 80040e4:	f023 0307 	bic.w	r3, r3, #7
 80040e8:	3308      	adds	r3, #8
 80040ea:	9303      	str	r3, [sp, #12]
 80040ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ee:	4433      	add	r3, r6
 80040f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80040f2:	e76a      	b.n	8003fca <_svfiprintf_r+0x52>
 80040f4:	460c      	mov	r4, r1
 80040f6:	2001      	movs	r0, #1
 80040f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040fc:	e7a8      	b.n	8004050 <_svfiprintf_r+0xd8>
 80040fe:	2300      	movs	r3, #0
 8004100:	f04f 0c0a 	mov.w	ip, #10
 8004104:	4619      	mov	r1, r3
 8004106:	3401      	adds	r4, #1
 8004108:	9305      	str	r3, [sp, #20]
 800410a:	4620      	mov	r0, r4
 800410c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004110:	3a30      	subs	r2, #48	@ 0x30
 8004112:	2a09      	cmp	r2, #9
 8004114:	d903      	bls.n	800411e <_svfiprintf_r+0x1a6>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0c6      	beq.n	80040a8 <_svfiprintf_r+0x130>
 800411a:	9105      	str	r1, [sp, #20]
 800411c:	e7c4      	b.n	80040a8 <_svfiprintf_r+0x130>
 800411e:	4604      	mov	r4, r0
 8004120:	2301      	movs	r3, #1
 8004122:	fb0c 2101 	mla	r1, ip, r1, r2
 8004126:	e7f0      	b.n	800410a <_svfiprintf_r+0x192>
 8004128:	ab03      	add	r3, sp, #12
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	462a      	mov	r2, r5
 800412e:	4638      	mov	r0, r7
 8004130:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <_svfiprintf_r+0x1f4>)
 8004132:	a904      	add	r1, sp, #16
 8004134:	f3af 8000 	nop.w
 8004138:	1c42      	adds	r2, r0, #1
 800413a:	4606      	mov	r6, r0
 800413c:	d1d6      	bne.n	80040ec <_svfiprintf_r+0x174>
 800413e:	89ab      	ldrh	r3, [r5, #12]
 8004140:	065b      	lsls	r3, r3, #25
 8004142:	f53f af2d 	bmi.w	8003fa0 <_svfiprintf_r+0x28>
 8004146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004148:	e72c      	b.n	8003fa4 <_svfiprintf_r+0x2c>
 800414a:	ab03      	add	r3, sp, #12
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	462a      	mov	r2, r5
 8004150:	4638      	mov	r0, r7
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <_svfiprintf_r+0x1f4>)
 8004154:	a904      	add	r1, sp, #16
 8004156:	f000 f87d 	bl	8004254 <_printf_i>
 800415a:	e7ed      	b.n	8004138 <_svfiprintf_r+0x1c0>
 800415c:	080045ee 	.word	0x080045ee
 8004160:	080045f4 	.word	0x080045f4
 8004164:	080045f8 	.word	0x080045f8
 8004168:	00000000 	.word	0x00000000
 800416c:	08003ec1 	.word	0x08003ec1

08004170 <_printf_common>:
 8004170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	4616      	mov	r6, r2
 8004176:	4698      	mov	r8, r3
 8004178:	688a      	ldr	r2, [r1, #8]
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	4607      	mov	r7, r0
 800417e:	4293      	cmp	r3, r2
 8004180:	bfb8      	it	lt
 8004182:	4613      	movlt	r3, r2
 8004184:	6033      	str	r3, [r6, #0]
 8004186:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800418a:	460c      	mov	r4, r1
 800418c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004190:	b10a      	cbz	r2, 8004196 <_printf_common+0x26>
 8004192:	3301      	adds	r3, #1
 8004194:	6033      	str	r3, [r6, #0]
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	0699      	lsls	r1, r3, #26
 800419a:	bf42      	ittt	mi
 800419c:	6833      	ldrmi	r3, [r6, #0]
 800419e:	3302      	addmi	r3, #2
 80041a0:	6033      	strmi	r3, [r6, #0]
 80041a2:	6825      	ldr	r5, [r4, #0]
 80041a4:	f015 0506 	ands.w	r5, r5, #6
 80041a8:	d106      	bne.n	80041b8 <_printf_common+0x48>
 80041aa:	f104 0a19 	add.w	sl, r4, #25
 80041ae:	68e3      	ldr	r3, [r4, #12]
 80041b0:	6832      	ldr	r2, [r6, #0]
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	42ab      	cmp	r3, r5
 80041b6:	dc2b      	bgt.n	8004210 <_printf_common+0xa0>
 80041b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041bc:	6822      	ldr	r2, [r4, #0]
 80041be:	3b00      	subs	r3, #0
 80041c0:	bf18      	it	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	0692      	lsls	r2, r2, #26
 80041c6:	d430      	bmi.n	800422a <_printf_common+0xba>
 80041c8:	4641      	mov	r1, r8
 80041ca:	4638      	mov	r0, r7
 80041cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041d0:	47c8      	blx	r9
 80041d2:	3001      	adds	r0, #1
 80041d4:	d023      	beq.n	800421e <_printf_common+0xae>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	6922      	ldr	r2, [r4, #16]
 80041da:	f003 0306 	and.w	r3, r3, #6
 80041de:	2b04      	cmp	r3, #4
 80041e0:	bf14      	ite	ne
 80041e2:	2500      	movne	r5, #0
 80041e4:	6833      	ldreq	r3, [r6, #0]
 80041e6:	f04f 0600 	mov.w	r6, #0
 80041ea:	bf08      	it	eq
 80041ec:	68e5      	ldreq	r5, [r4, #12]
 80041ee:	f104 041a 	add.w	r4, r4, #26
 80041f2:	bf08      	it	eq
 80041f4:	1aed      	subeq	r5, r5, r3
 80041f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80041fa:	bf08      	it	eq
 80041fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004200:	4293      	cmp	r3, r2
 8004202:	bfc4      	itt	gt
 8004204:	1a9b      	subgt	r3, r3, r2
 8004206:	18ed      	addgt	r5, r5, r3
 8004208:	42b5      	cmp	r5, r6
 800420a:	d11a      	bne.n	8004242 <_printf_common+0xd2>
 800420c:	2000      	movs	r0, #0
 800420e:	e008      	b.n	8004222 <_printf_common+0xb2>
 8004210:	2301      	movs	r3, #1
 8004212:	4652      	mov	r2, sl
 8004214:	4641      	mov	r1, r8
 8004216:	4638      	mov	r0, r7
 8004218:	47c8      	blx	r9
 800421a:	3001      	adds	r0, #1
 800421c:	d103      	bne.n	8004226 <_printf_common+0xb6>
 800421e:	f04f 30ff 	mov.w	r0, #4294967295
 8004222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004226:	3501      	adds	r5, #1
 8004228:	e7c1      	b.n	80041ae <_printf_common+0x3e>
 800422a:	2030      	movs	r0, #48	@ 0x30
 800422c:	18e1      	adds	r1, r4, r3
 800422e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004238:	4422      	add	r2, r4
 800423a:	3302      	adds	r3, #2
 800423c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004240:	e7c2      	b.n	80041c8 <_printf_common+0x58>
 8004242:	2301      	movs	r3, #1
 8004244:	4622      	mov	r2, r4
 8004246:	4641      	mov	r1, r8
 8004248:	4638      	mov	r0, r7
 800424a:	47c8      	blx	r9
 800424c:	3001      	adds	r0, #1
 800424e:	d0e6      	beq.n	800421e <_printf_common+0xae>
 8004250:	3601      	adds	r6, #1
 8004252:	e7d9      	b.n	8004208 <_printf_common+0x98>

08004254 <_printf_i>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	7e0f      	ldrb	r7, [r1, #24]
 800425a:	4691      	mov	r9, r2
 800425c:	2f78      	cmp	r7, #120	@ 0x78
 800425e:	4680      	mov	r8, r0
 8004260:	460c      	mov	r4, r1
 8004262:	469a      	mov	sl, r3
 8004264:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800426a:	d807      	bhi.n	800427c <_printf_i+0x28>
 800426c:	2f62      	cmp	r7, #98	@ 0x62
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x32>
 8004270:	2f00      	cmp	r7, #0
 8004272:	f000 80d3 	beq.w	800441c <_printf_i+0x1c8>
 8004276:	2f58      	cmp	r7, #88	@ 0x58
 8004278:	f000 80ba 	beq.w	80043f0 <_printf_i+0x19c>
 800427c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004284:	e03a      	b.n	80042fc <_printf_i+0xa8>
 8004286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800428a:	2b15      	cmp	r3, #21
 800428c:	d8f6      	bhi.n	800427c <_printf_i+0x28>
 800428e:	a101      	add	r1, pc, #4	@ (adr r1, 8004294 <_printf_i+0x40>)
 8004290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004294:	080042ed 	.word	0x080042ed
 8004298:	08004301 	.word	0x08004301
 800429c:	0800427d 	.word	0x0800427d
 80042a0:	0800427d 	.word	0x0800427d
 80042a4:	0800427d 	.word	0x0800427d
 80042a8:	0800427d 	.word	0x0800427d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800427d 	.word	0x0800427d
 80042b4:	0800427d 	.word	0x0800427d
 80042b8:	0800427d 	.word	0x0800427d
 80042bc:	0800427d 	.word	0x0800427d
 80042c0:	08004403 	.word	0x08004403
 80042c4:	0800432b 	.word	0x0800432b
 80042c8:	080043bd 	.word	0x080043bd
 80042cc:	0800427d 	.word	0x0800427d
 80042d0:	0800427d 	.word	0x0800427d
 80042d4:	08004425 	.word	0x08004425
 80042d8:	0800427d 	.word	0x0800427d
 80042dc:	0800432b 	.word	0x0800432b
 80042e0:	0800427d 	.word	0x0800427d
 80042e4:	0800427d 	.word	0x0800427d
 80042e8:	080043c5 	.word	0x080043c5
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6032      	str	r2, [r6, #0]
 80042f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042fc:	2301      	movs	r3, #1
 80042fe:	e09e      	b.n	800443e <_printf_i+0x1ea>
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	1d19      	adds	r1, r3, #4
 8004306:	6031      	str	r1, [r6, #0]
 8004308:	0606      	lsls	r6, r0, #24
 800430a:	d501      	bpl.n	8004310 <_printf_i+0xbc>
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	e003      	b.n	8004318 <_printf_i+0xc4>
 8004310:	0645      	lsls	r5, r0, #25
 8004312:	d5fb      	bpl.n	800430c <_printf_i+0xb8>
 8004314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004318:	2d00      	cmp	r5, #0
 800431a:	da03      	bge.n	8004324 <_printf_i+0xd0>
 800431c:	232d      	movs	r3, #45	@ 0x2d
 800431e:	426d      	negs	r5, r5
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004324:	230a      	movs	r3, #10
 8004326:	4859      	ldr	r0, [pc, #356]	@ (800448c <_printf_i+0x238>)
 8004328:	e011      	b.n	800434e <_printf_i+0xfa>
 800432a:	6821      	ldr	r1, [r4, #0]
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	0608      	lsls	r0, r1, #24
 8004330:	f853 5b04 	ldr.w	r5, [r3], #4
 8004334:	d402      	bmi.n	800433c <_printf_i+0xe8>
 8004336:	0649      	lsls	r1, r1, #25
 8004338:	bf48      	it	mi
 800433a:	b2ad      	uxthmi	r5, r5
 800433c:	2f6f      	cmp	r7, #111	@ 0x6f
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	bf14      	ite	ne
 8004342:	230a      	movne	r3, #10
 8004344:	2308      	moveq	r3, #8
 8004346:	4851      	ldr	r0, [pc, #324]	@ (800448c <_printf_i+0x238>)
 8004348:	2100      	movs	r1, #0
 800434a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800434e:	6866      	ldr	r6, [r4, #4]
 8004350:	2e00      	cmp	r6, #0
 8004352:	bfa8      	it	ge
 8004354:	6821      	ldrge	r1, [r4, #0]
 8004356:	60a6      	str	r6, [r4, #8]
 8004358:	bfa4      	itt	ge
 800435a:	f021 0104 	bicge.w	r1, r1, #4
 800435e:	6021      	strge	r1, [r4, #0]
 8004360:	b90d      	cbnz	r5, 8004366 <_printf_i+0x112>
 8004362:	2e00      	cmp	r6, #0
 8004364:	d04b      	beq.n	80043fe <_printf_i+0x1aa>
 8004366:	4616      	mov	r6, r2
 8004368:	fbb5 f1f3 	udiv	r1, r5, r3
 800436c:	fb03 5711 	mls	r7, r3, r1, r5
 8004370:	5dc7      	ldrb	r7, [r0, r7]
 8004372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004376:	462f      	mov	r7, r5
 8004378:	42bb      	cmp	r3, r7
 800437a:	460d      	mov	r5, r1
 800437c:	d9f4      	bls.n	8004368 <_printf_i+0x114>
 800437e:	2b08      	cmp	r3, #8
 8004380:	d10b      	bne.n	800439a <_printf_i+0x146>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	07df      	lsls	r7, r3, #31
 8004386:	d508      	bpl.n	800439a <_printf_i+0x146>
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	6861      	ldr	r1, [r4, #4]
 800438c:	4299      	cmp	r1, r3
 800438e:	bfde      	ittt	le
 8004390:	2330      	movle	r3, #48	@ 0x30
 8004392:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004396:	f106 36ff 	addle.w	r6, r6, #4294967295
 800439a:	1b92      	subs	r2, r2, r6
 800439c:	6122      	str	r2, [r4, #16]
 800439e:	464b      	mov	r3, r9
 80043a0:	4621      	mov	r1, r4
 80043a2:	4640      	mov	r0, r8
 80043a4:	f8cd a000 	str.w	sl, [sp]
 80043a8:	aa03      	add	r2, sp, #12
 80043aa:	f7ff fee1 	bl	8004170 <_printf_common>
 80043ae:	3001      	adds	r0, #1
 80043b0:	d14a      	bne.n	8004448 <_printf_i+0x1f4>
 80043b2:	f04f 30ff 	mov.w	r0, #4294967295
 80043b6:	b004      	add	sp, #16
 80043b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	f043 0320 	orr.w	r3, r3, #32
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	2778      	movs	r7, #120	@ 0x78
 80043c6:	4832      	ldr	r0, [pc, #200]	@ (8004490 <_printf_i+0x23c>)
 80043c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	6831      	ldr	r1, [r6, #0]
 80043d0:	061f      	lsls	r7, r3, #24
 80043d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80043d6:	d402      	bmi.n	80043de <_printf_i+0x18a>
 80043d8:	065f      	lsls	r7, r3, #25
 80043da:	bf48      	it	mi
 80043dc:	b2ad      	uxthmi	r5, r5
 80043de:	6031      	str	r1, [r6, #0]
 80043e0:	07d9      	lsls	r1, r3, #31
 80043e2:	bf44      	itt	mi
 80043e4:	f043 0320 	orrmi.w	r3, r3, #32
 80043e8:	6023      	strmi	r3, [r4, #0]
 80043ea:	b11d      	cbz	r5, 80043f4 <_printf_i+0x1a0>
 80043ec:	2310      	movs	r3, #16
 80043ee:	e7ab      	b.n	8004348 <_printf_i+0xf4>
 80043f0:	4826      	ldr	r0, [pc, #152]	@ (800448c <_printf_i+0x238>)
 80043f2:	e7e9      	b.n	80043c8 <_printf_i+0x174>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f023 0320 	bic.w	r3, r3, #32
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	e7f6      	b.n	80043ec <_printf_i+0x198>
 80043fe:	4616      	mov	r6, r2
 8004400:	e7bd      	b.n	800437e <_printf_i+0x12a>
 8004402:	6833      	ldr	r3, [r6, #0]
 8004404:	6825      	ldr	r5, [r4, #0]
 8004406:	1d18      	adds	r0, r3, #4
 8004408:	6961      	ldr	r1, [r4, #20]
 800440a:	6030      	str	r0, [r6, #0]
 800440c:	062e      	lsls	r6, r5, #24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	d501      	bpl.n	8004416 <_printf_i+0x1c2>
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	e002      	b.n	800441c <_printf_i+0x1c8>
 8004416:	0668      	lsls	r0, r5, #25
 8004418:	d5fb      	bpl.n	8004412 <_printf_i+0x1be>
 800441a:	8019      	strh	r1, [r3, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	4616      	mov	r6, r2
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	e7bc      	b.n	800439e <_printf_i+0x14a>
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	2100      	movs	r1, #0
 8004428:	1d1a      	adds	r2, r3, #4
 800442a:	6032      	str	r2, [r6, #0]
 800442c:	681e      	ldr	r6, [r3, #0]
 800442e:	6862      	ldr	r2, [r4, #4]
 8004430:	4630      	mov	r0, r6
 8004432:	f000 f859 	bl	80044e8 <memchr>
 8004436:	b108      	cbz	r0, 800443c <_printf_i+0x1e8>
 8004438:	1b80      	subs	r0, r0, r6
 800443a:	6060      	str	r0, [r4, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	6123      	str	r3, [r4, #16]
 8004440:	2300      	movs	r3, #0
 8004442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004446:	e7aa      	b.n	800439e <_printf_i+0x14a>
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	47d0      	blx	sl
 8004452:	3001      	adds	r0, #1
 8004454:	d0ad      	beq.n	80043b2 <_printf_i+0x15e>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	079b      	lsls	r3, r3, #30
 800445a:	d413      	bmi.n	8004484 <_printf_i+0x230>
 800445c:	68e0      	ldr	r0, [r4, #12]
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	4298      	cmp	r0, r3
 8004462:	bfb8      	it	lt
 8004464:	4618      	movlt	r0, r3
 8004466:	e7a6      	b.n	80043b6 <_printf_i+0x162>
 8004468:	2301      	movs	r3, #1
 800446a:	4632      	mov	r2, r6
 800446c:	4649      	mov	r1, r9
 800446e:	4640      	mov	r0, r8
 8004470:	47d0      	blx	sl
 8004472:	3001      	adds	r0, #1
 8004474:	d09d      	beq.n	80043b2 <_printf_i+0x15e>
 8004476:	3501      	adds	r5, #1
 8004478:	68e3      	ldr	r3, [r4, #12]
 800447a:	9903      	ldr	r1, [sp, #12]
 800447c:	1a5b      	subs	r3, r3, r1
 800447e:	42ab      	cmp	r3, r5
 8004480:	dcf2      	bgt.n	8004468 <_printf_i+0x214>
 8004482:	e7eb      	b.n	800445c <_printf_i+0x208>
 8004484:	2500      	movs	r5, #0
 8004486:	f104 0619 	add.w	r6, r4, #25
 800448a:	e7f5      	b.n	8004478 <_printf_i+0x224>
 800448c:	080045ff 	.word	0x080045ff
 8004490:	08004610 	.word	0x08004610

08004494 <memmove>:
 8004494:	4288      	cmp	r0, r1
 8004496:	b510      	push	{r4, lr}
 8004498:	eb01 0402 	add.w	r4, r1, r2
 800449c:	d902      	bls.n	80044a4 <memmove+0x10>
 800449e:	4284      	cmp	r4, r0
 80044a0:	4623      	mov	r3, r4
 80044a2:	d807      	bhi.n	80044b4 <memmove+0x20>
 80044a4:	1e43      	subs	r3, r0, #1
 80044a6:	42a1      	cmp	r1, r4
 80044a8:	d008      	beq.n	80044bc <memmove+0x28>
 80044aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044b2:	e7f8      	b.n	80044a6 <memmove+0x12>
 80044b4:	4601      	mov	r1, r0
 80044b6:	4402      	add	r2, r0
 80044b8:	428a      	cmp	r2, r1
 80044ba:	d100      	bne.n	80044be <memmove+0x2a>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044c6:	e7f7      	b.n	80044b8 <memmove+0x24>

080044c8 <_sbrk_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	2300      	movs	r3, #0
 80044cc:	4d05      	ldr	r5, [pc, #20]	@ (80044e4 <_sbrk_r+0x1c>)
 80044ce:	4604      	mov	r4, r0
 80044d0:	4608      	mov	r0, r1
 80044d2:	602b      	str	r3, [r5, #0]
 80044d4:	f7fc fd20 	bl	8000f18 <_sbrk>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_sbrk_r+0x1a>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_sbrk_r+0x1a>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	200002f4 	.word	0x200002f4

080044e8 <memchr>:
 80044e8:	4603      	mov	r3, r0
 80044ea:	b510      	push	{r4, lr}
 80044ec:	b2c9      	uxtb	r1, r1
 80044ee:	4402      	add	r2, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	d101      	bne.n	80044fa <memchr+0x12>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e003      	b.n	8004502 <memchr+0x1a>
 80044fa:	7804      	ldrb	r4, [r0, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	428c      	cmp	r4, r1
 8004500:	d1f6      	bne.n	80044f0 <memchr+0x8>
 8004502:	bd10      	pop	{r4, pc}

08004504 <memcpy>:
 8004504:	440a      	add	r2, r1
 8004506:	4291      	cmp	r1, r2
 8004508:	f100 33ff 	add.w	r3, r0, #4294967295
 800450c:	d100      	bne.n	8004510 <memcpy+0xc>
 800450e:	4770      	bx	lr
 8004510:	b510      	push	{r4, lr}
 8004512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004516:	4291      	cmp	r1, r2
 8004518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800451c:	d1f9      	bne.n	8004512 <memcpy+0xe>
 800451e:	bd10      	pop	{r4, pc}

08004520 <_realloc_r>:
 8004520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004524:	4680      	mov	r8, r0
 8004526:	4615      	mov	r5, r2
 8004528:	460c      	mov	r4, r1
 800452a:	b921      	cbnz	r1, 8004536 <_realloc_r+0x16>
 800452c:	4611      	mov	r1, r2
 800452e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004532:	f7ff bc39 	b.w	8003da8 <_malloc_r>
 8004536:	b92a      	cbnz	r2, 8004544 <_realloc_r+0x24>
 8004538:	f7ff fbcc 	bl	8003cd4 <_free_r>
 800453c:	2400      	movs	r4, #0
 800453e:	4620      	mov	r0, r4
 8004540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004544:	f000 f81a 	bl	800457c <_malloc_usable_size_r>
 8004548:	4285      	cmp	r5, r0
 800454a:	4606      	mov	r6, r0
 800454c:	d802      	bhi.n	8004554 <_realloc_r+0x34>
 800454e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004552:	d8f4      	bhi.n	800453e <_realloc_r+0x1e>
 8004554:	4629      	mov	r1, r5
 8004556:	4640      	mov	r0, r8
 8004558:	f7ff fc26 	bl	8003da8 <_malloc_r>
 800455c:	4607      	mov	r7, r0
 800455e:	2800      	cmp	r0, #0
 8004560:	d0ec      	beq.n	800453c <_realloc_r+0x1c>
 8004562:	42b5      	cmp	r5, r6
 8004564:	462a      	mov	r2, r5
 8004566:	4621      	mov	r1, r4
 8004568:	bf28      	it	cs
 800456a:	4632      	movcs	r2, r6
 800456c:	f7ff ffca 	bl	8004504 <memcpy>
 8004570:	4621      	mov	r1, r4
 8004572:	4640      	mov	r0, r8
 8004574:	f7ff fbae 	bl	8003cd4 <_free_r>
 8004578:	463c      	mov	r4, r7
 800457a:	e7e0      	b.n	800453e <_realloc_r+0x1e>

0800457c <_malloc_usable_size_r>:
 800457c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004580:	1f18      	subs	r0, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfbc      	itt	lt
 8004586:	580b      	ldrlt	r3, [r1, r0]
 8004588:	18c0      	addlt	r0, r0, r3
 800458a:	4770      	bx	lr

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
